# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_csaccess')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_csaccess')
    _csaccess = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csaccess', [dirname(__file__)])
        except ImportError:
            import _csaccess
            return _csaccess
        try:
            _mod = imp.load_module('_csaccess', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _csaccess = swig_import_helper()
    del swig_import_helper
else:
    import _csaccess
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def cdata(ptr, nelements=1):
    return _csaccess.cdata(ptr, nelements)
cdata = _csaccess.cdata

def memmove(data, indata):
    return _csaccess.memmove(data, indata)
memmove = _csaccess.memmove
CS_CIDR3 = _csaccess.CS_CIDR3
CS_CIDR2 = _csaccess.CS_CIDR2
CS_CIDR1 = _csaccess.CS_CIDR1
CS_CIDR0 = _csaccess.CS_CIDR0
CS_CLASS_ROMTABLE = _csaccess.CS_CLASS_ROMTABLE
CS_CLASS_CORESIGHT = _csaccess.CS_CLASS_CORESIGHT
CS_CLASS_GENERIC = _csaccess.CS_CLASS_GENERIC
CS_CLASS_PRIMECELL = _csaccess.CS_CLASS_PRIMECELL
CS_PIDR4 = _csaccess.CS_PIDR4
CS_PIDR3 = _csaccess.CS_PIDR3
CS_PIDR2 = _csaccess.CS_PIDR2
CS_PIDR1 = _csaccess.CS_PIDR1
CS_PIDR0 = _csaccess.CS_PIDR0
CS_DEVTYPE = _csaccess.CS_DEVTYPE
CS_DEVID = _csaccess.CS_DEVID
CS_DEVID1 = _csaccess.CS_DEVID1
CS_DEVID0 = _csaccess.CS_DEVID0
CS_DEVARCH = _csaccess.CS_DEVARCH
CS_DEVAFF0 = _csaccess.CS_DEVAFF0
CS_DEVAFF1 = _csaccess.CS_DEVAFF1
CS_CLAIMSET = _csaccess.CS_CLAIMSET
CS_CLAIMCLR = _csaccess.CS_CLAIMCLR
CS_LAR = _csaccess.CS_LAR
CS_LSR = _csaccess.CS_LSR
CS_KEY = _csaccess.CS_KEY
CS_ETMCR = _csaccess.CS_ETMCR
CS_ETMCR_PowerDown = _csaccess.CS_ETMCR_PowerDown
CS_ETMCR_MonitorCPRT = _csaccess.CS_ETMCR_MonitorCPRT
CS_ETMCR_Data = _csaccess.CS_ETMCR_Data
CS_ETMCR_Address = _csaccess.CS_ETMCR_Address
CS_ETMCR_AddressData = _csaccess.CS_ETMCR_AddressData
CS_ETMCR_BranchBroadcast = _csaccess.CS_ETMCR_BranchBroadcast
CS_ETMCR_ProgBit = _csaccess.CS_ETMCR_ProgBit
CS_ETMCR_ETMEN = _csaccess.CS_ETMCR_ETMEN
CS_ETMCR_CycleAccurate = _csaccess.CS_ETMCR_CycleAccurate
CS_ETMCR_TSEn = _csaccess.CS_ETMCR_TSEn
CS_ETMCR_ReturnStack = _csaccess.CS_ETMCR_ReturnStack
CS_ETMCCR = _csaccess.CS_ETMCCR
CS_ETMTRIGGER = _csaccess.CS_ETMTRIGGER
CS_ETMASICCR = _csaccess.CS_ETMASICCR
CS_ETMSTATUS = _csaccess.CS_ETMSTATUS
CS_ETMSR_ProgBit = _csaccess.CS_ETMSR_ProgBit
CS_ETMSCR = _csaccess.CS_ETMSCR
CS_ETMTSSCR = _csaccess.CS_ETMTSSCR
CS_ETMTECR2 = _csaccess.CS_ETMTECR2
CS_ETMTEEVR = _csaccess.CS_ETMTEEVR
CS_ETMTECR1 = _csaccess.CS_ETMTECR1
CS_ETMTECR1_SSEN = _csaccess.CS_ETMTECR1_SSEN
CS_ETMTECR1_EXCLUDE = _csaccess.CS_ETMTECR1_EXCLUDE
CS_ETMFFRR = _csaccess.CS_ETMFFRR
CS_ETMVDEVR = _csaccess.CS_ETMVDEVR
CS_ETMER_TRENABLE = _csaccess.CS_ETMER_TRENABLE
CS_ETMER_NS = _csaccess.CS_ETMER_NS
CS_ETMER_TPROH = _csaccess.CS_ETMER_TPROH
CS_ETMER_ALWAYS = _csaccess.CS_ETMER_ALWAYS
CS_ETME_NEVER = _csaccess.CS_ETME_NEVER
CS_ETMACT_FETCH = _csaccess.CS_ETMACT_FETCH
CS_ETMACT_EX = _csaccess.CS_ETMACT_EX
CS_ETMACT_EXPASS = _csaccess.CS_ETMACT_EXPASS
CS_ETMACT_EXFAIL = _csaccess.CS_ETMACT_EXFAIL
CS_ETMACT_DATA_LDST = _csaccess.CS_ETMACT_DATA_LDST
CS_ETMACT_DATA_LD = _csaccess.CS_ETMACT_DATA_LD
CS_ETMACT_DATA_ST = _csaccess.CS_ETMACT_DATA_ST
CS_ETMACT_BYTE = _csaccess.CS_ETMACT_BYTE
CS_ETMACT_HALFWORD = _csaccess.CS_ETMACT_HALFWORD
CS_ETMACT_THUMB1 = _csaccess.CS_ETMACT_THUMB1
CS_ETMACT_WORD = _csaccess.CS_ETMACT_WORD
CS_ETMACT_ARMTHUMB = _csaccess.CS_ETMACT_ARMTHUMB
CS_ETMACT_EXACT = _csaccess.CS_ETMACT_EXACT
CS_ETMACT_S_NS_ALL = _csaccess.CS_ETMACT_S_NS_ALL
CS_ETMACT_S_3v2 = _csaccess.CS_ETMACT_S_3v2
CS_ETMACT_NS_3v2 = _csaccess.CS_ETMACT_NS_3v2
CS_ETMACT_S_KERNEL = _csaccess.CS_ETMACT_S_KERNEL
CS_ETMACT_NS_KERNEL = _csaccess.CS_ETMACT_NS_KERNEL
CS_ETMACT_S_NEVER = _csaccess.CS_ETMACT_S_NEVER
CS_ETMACT_NS_NEVER = _csaccess.CS_ETMACT_NS_NEVER
CS_ETMACT_KERNEL = _csaccess.CS_ETMACT_KERNEL
CS_ETMACT_S_USER = _csaccess.CS_ETMACT_S_USER
CS_ETMACT_NS_USER = _csaccess.CS_ETMACT_NS_USER
CS_ETMACT_USER = _csaccess.CS_ETMACT_USER
CS_ETMACT_HYP = _csaccess.CS_ETMACT_HYP
CS_ETMACT_VMID = _csaccess.CS_ETMACT_VMID
CS_ETMSEQ_STATES = _csaccess.CS_ETMSEQ_STATES
CS_ETMSEQ_TRANSITIONS = _csaccess.CS_ETMSEQ_TRANSITIONS
CS_ETMSQ12EVR = _csaccess.CS_ETMSQ12EVR
CS_ETMSQ21EVR = _csaccess.CS_ETMSQ21EVR
CS_ETMSQ23EVR = _csaccess.CS_ETMSQ23EVR
CS_ETMSQ31EVR = _csaccess.CS_ETMSQ31EVR
CS_ETMSQ32EVR = _csaccess.CS_ETMSQ32EVR
CS_ETMSQ13EVR = _csaccess.CS_ETMSQ13EVR
CS_ETMSQR = _csaccess.CS_ETMSQR
CS_ETMCIDCMR = _csaccess.CS_ETMCIDCMR
CS_ETMSYNCFR = _csaccess.CS_ETMSYNCFR
CS_ETMIDR = _csaccess.CS_ETMIDR
CS_ETMCCER = _csaccess.CS_ETMCCER
CS_ETMTSEVR = _csaccess.CS_ETMTSEVR
CS_ETMAUXCR = _csaccess.CS_ETMAUXCR
CS_ETMTRACEIDR = _csaccess.CS_ETMTRACEIDR
CS_ETMIDR2 = _csaccess.CS_ETMIDR2
CS_ETMVMIDCVR = _csaccess.CS_ETMVMIDCVR
CS_ETMOSLAR = _csaccess.CS_ETMOSLAR
CS_ETMOSLSR = _csaccess.CS_ETMOSLSR
CS_ETMPDSR = _csaccess.CS_ETMPDSR
CS_ETMLSR = _csaccess.CS_ETMLSR
CS_ETMV4_PRGCTLR = _csaccess.CS_ETMV4_PRGCTLR
CS_ETMV4_PRGCTLR_en = _csaccess.CS_ETMV4_PRGCTLR_en
CS_ETMV4_PROCSELR = _csaccess.CS_ETMV4_PROCSELR
CS_ETMV4_STATR = _csaccess.CS_ETMV4_STATR
CS_ETMV4_STATR_idle = _csaccess.CS_ETMV4_STATR_idle
CS_ETMV4_STATR_pmstable = _csaccess.CS_ETMV4_STATR_pmstable
CS_ETMV4_CONFIGR = _csaccess.CS_ETMV4_CONFIGR
CS_ETMV4_AUXCTLR = _csaccess.CS_ETMV4_AUXCTLR
CS_ETMV4_EVENTCTL0R = _csaccess.CS_ETMV4_EVENTCTL0R
CS_ETMV4_EVENTCTL1R = _csaccess.CS_ETMV4_EVENTCTL1R
CS_ETMV4_STALLCTLR = _csaccess.CS_ETMV4_STALLCTLR
CS_ETMV4_TSCTLR = _csaccess.CS_ETMV4_TSCTLR
CS_ETMV4_SYNCPR = _csaccess.CS_ETMV4_SYNCPR
CS_ETMV4_CCCTLR = _csaccess.CS_ETMV4_CCCTLR
CS_ETMV4_BBCTLR = _csaccess.CS_ETMV4_BBCTLR
CS_ETMV4_TRACEIDR = _csaccess.CS_ETMV4_TRACEIDR
CS_ETMV4_QCTLR = _csaccess.CS_ETMV4_QCTLR
CS_ETMV4_CONFIGR_InstP0_off = _csaccess.CS_ETMV4_CONFIGR_InstP0_off
CS_ETMV4_CONFIGR_InstP0_LD = _csaccess.CS_ETMV4_CONFIGR_InstP0_LD
CS_ETMV4_CONFIGR_InstP0_ST = _csaccess.CS_ETMV4_CONFIGR_InstP0_ST
CS_ETMV4_CONFIGR_InstP0_LDST = _csaccess.CS_ETMV4_CONFIGR_InstP0_LDST
CS_ETMV4_CONFIGR_BBMode = _csaccess.CS_ETMV4_CONFIGR_BBMode
CS_ETMV4_CONFIGR_CCI = _csaccess.CS_ETMV4_CONFIGR_CCI
CS_ETMV4_CONFIGR_CID = _csaccess.CS_ETMV4_CONFIGR_CID
CS_ETMV4_CONFIGR_VMID = _csaccess.CS_ETMV4_CONFIGR_VMID
CS_ETMV4_CONFIGR_COND_LD = _csaccess.CS_ETMV4_CONFIGR_COND_LD
CS_ETMV4_CONFIGR_COND_ST = _csaccess.CS_ETMV4_CONFIGR_COND_ST
CS_ETMV4_CONFIGR_COND_LDST = _csaccess.CS_ETMV4_CONFIGR_COND_LDST
CS_ETMV4_CONFIGR_COND_ALL = _csaccess.CS_ETMV4_CONFIGR_COND_ALL
CS_ETMV4_CONFIGR_TS = _csaccess.CS_ETMV4_CONFIGR_TS
CS_ETMV4_CONFIGR_RS = _csaccess.CS_ETMV4_CONFIGR_RS
CS_ETMV4_CONFIGR_QE_with_cnt = _csaccess.CS_ETMV4_CONFIGR_QE_with_cnt
CS_ETMV4_CONFIGR_QE_all = _csaccess.CS_ETMV4_CONFIGR_QE_all
CS_ETMV4_CONFIGR_DA = _csaccess.CS_ETMV4_CONFIGR_DA
CS_ETMV4_CONFIGR_DV = _csaccess.CS_ETMV4_CONFIGR_DV
CS_ETMV4_VICTLR = _csaccess.CS_ETMV4_VICTLR
CS_ETMV4_VIIECTLR = _csaccess.CS_ETMV4_VIIECTLR
CS_ETMV4_VISSCTLR = _csaccess.CS_ETMV4_VISSCTLR
CS_ETMV4_VIPSSCTLR = _csaccess.CS_ETMV4_VIPSSCTLR
CS_ETMV4_VDCTLR = _csaccess.CS_ETMV4_VDCTLR
CS_ETMV4_VDSACCTLR = _csaccess.CS_ETMV4_VDSACCTLR
CS_ETMV4_VDARCCTLR = _csaccess.CS_ETMV4_VDARCCTLR
CS_ETMV4_SEQRSTEVR = _csaccess.CS_ETMV4_SEQRSTEVR
CS_ETMV4_SEQSTR = _csaccess.CS_ETMV4_SEQSTR
CS_ETMV4_CNTCTLR_rldself = _csaccess.CS_ETMV4_CNTCTLR_rldself
CS_ETMV4_CNTCTLR_chain = _csaccess.CS_ETMV4_CNTCTLR_chain
CS_ETMV4_EXTINSELR = _csaccess.CS_ETMV4_EXTINSELR
CS_ETMV4_RSCTLR_pairinv = _csaccess.CS_ETMV4_RSCTLR_pairinv
CS_ETMV4_RSCTLR_inv = _csaccess.CS_ETMV4_RSCTLR_inv
CS_ETMV4_EVENT_ALWAYS = _csaccess.CS_ETMV4_EVENT_ALWAYS
CS_ETMV4_EVENT_NEVER = _csaccess.CS_ETMV4_EVENT_NEVER
CS_ETMV4_CIDCCTLR0 = _csaccess.CS_ETMV4_CIDCCTLR0
CS_ETMV4_CIDCCTLR1 = _csaccess.CS_ETMV4_CIDCCTLR1
CS_ETMV4_VMIDCCTLR0 = _csaccess.CS_ETMV4_VMIDCCTLR0
CS_ETMV4_VMIDCCTLR1 = _csaccess.CS_ETMV4_VMIDCCTLR1
CS_ETMV4_ACATR_IA = _csaccess.CS_ETMV4_ACATR_IA
CS_ETMV4_ACATR_DL = _csaccess.CS_ETMV4_ACATR_DL
CS_ETMV4_ACATR_DS = _csaccess.CS_ETMV4_ACATR_DS
CS_ETMV4_ACATR_DL_DS = _csaccess.CS_ETMV4_ACATR_DL_DS
CS_ETMV4_ACATR_CTXT = _csaccess.CS_ETMV4_ACATR_CTXT
CS_ETMV4_ACATR_VMID = _csaccess.CS_ETMV4_ACATR_VMID
CS_ETMV4_ACATR_CTXT_VMID = _csaccess.CS_ETMV4_ACATR_CTXT_VMID
CS_ETMV4_ACATR_ExEL0_S = _csaccess.CS_ETMV4_ACATR_ExEL0_S
CS_ETMV4_ACATR_ExEL1_S = _csaccess.CS_ETMV4_ACATR_ExEL1_S
CS_ETMV4_ACATR_ExEL3_S = _csaccess.CS_ETMV4_ACATR_ExEL3_S
CS_ETMV4_ACATR_ExEL0_NS = _csaccess.CS_ETMV4_ACATR_ExEL0_NS
CS_ETMV4_ACATR_ExEL1_NS = _csaccess.CS_ETMV4_ACATR_ExEL1_NS
CS_ETMV4_ACATR_ExEL2_NS = _csaccess.CS_ETMV4_ACATR_ExEL2_NS
CS_ETMV4_ACATR_DMATCH = _csaccess.CS_ETMV4_ACATR_DMATCH
CS_ETMV4_ACATR_DMATCH_n = _csaccess.CS_ETMV4_ACATR_DMATCH_n
CS_ETMV4_ACATR_DSIZE_B = _csaccess.CS_ETMV4_ACATR_DSIZE_B
CS_ETMV4_ACATR_DSIZE_HW = _csaccess.CS_ETMV4_ACATR_DSIZE_HW
CS_ETMV4_ACATR_DSIZE_W = _csaccess.CS_ETMV4_ACATR_DSIZE_W
CS_ETMV4_ACATR_DSIZE_DW = _csaccess.CS_ETMV4_ACATR_DSIZE_DW
CS_ETMV4_ACATR_DRANGE = _csaccess.CS_ETMV4_ACATR_DRANGE
CS_ETMv4_IDR0 = _csaccess.CS_ETMv4_IDR0
CS_ETMv4_IDR1 = _csaccess.CS_ETMv4_IDR1
CS_ETMv4_IDR2 = _csaccess.CS_ETMv4_IDR2
CS_ETMv4_IDR3 = _csaccess.CS_ETMv4_IDR3
CS_ETMv4_IDR4 = _csaccess.CS_ETMv4_IDR4
CS_ETMv4_IDR5 = _csaccess.CS_ETMv4_IDR5
CS_ETMv4_IDR6 = _csaccess.CS_ETMv4_IDR6
CS_ETMv4_IDR7 = _csaccess.CS_ETMv4_IDR7
CS_ETMv4_IDR8 = _csaccess.CS_ETMv4_IDR8
CS_ETMv4_IDR9 = _csaccess.CS_ETMv4_IDR9
CS_ETMv4_IDR10 = _csaccess.CS_ETMv4_IDR10
CS_ETMv4_IDR11 = _csaccess.CS_ETMv4_IDR11
CS_ETMv4_IDR12 = _csaccess.CS_ETMv4_IDR12
CS_ETMv4_IDR13 = _csaccess.CS_ETMv4_IDR13
CS_ETMv4_OSLAR = _csaccess.CS_ETMv4_OSLAR
CS_ETMv4_OSLSR = _csaccess.CS_ETMv4_OSLSR
CS_ETMv4_PDCR = _csaccess.CS_ETMv4_PDCR
CS_ETMv4_PDSR = _csaccess.CS_ETMv4_PDSR
CS_ETMv4_AUTHSTATUS = _csaccess.CS_ETMv4_AUTHSTATUS
CS_ETMv4_PDSR_PowerUp = _csaccess.CS_ETMv4_PDSR_PowerUp
CS_ETMv4_PDSR_StickyPowerUp = _csaccess.CS_ETMv4_PDSR_StickyPowerUp
CS_ETMv4_PDSR_OSLock = _csaccess.CS_ETMv4_PDSR_OSLock
CS_ITM_TRCEN = _csaccess.CS_ITM_TRCEN
CS_ITM_TRTRIG = _csaccess.CS_ITM_TRTRIG
CS_ITM_CTRL = _csaccess.CS_ITM_CTRL
CS_ITM_CTRL_ITMEn = _csaccess.CS_ITM_CTRL_ITMEn
CS_ITM_CTRL_TSSEn = _csaccess.CS_ITM_CTRL_TSSEn
CS_ITM_CTRL_ITMBusy = _csaccess.CS_ITM_CTRL_ITMBusy
CS_ITM_SYNCCTRL = _csaccess.CS_ITM_SYNCCTRL
CS_ITM_DCR = _csaccess.CS_ITM_DCR
CS_STM_SPER = _csaccess.CS_STM_SPER
CS_STM_SPTER = _csaccess.CS_STM_SPTER
CS_STM_PRIVMASKR = _csaccess.CS_STM_PRIVMASKR
CS_STM_SPSCR = _csaccess.CS_STM_SPSCR
CS_STM_SPSCR_PORTCTL = _csaccess.CS_STM_SPSCR_PORTCTL
CS_STM_SPMSCR = _csaccess.CS_STM_SPMSCR
CS_STM_SPMSCR_MASTCTL = _csaccess.CS_STM_SPMSCR_MASTCTL
CS_STM_SPOVERRIDER = _csaccess.CS_STM_SPOVERRIDER
CS_STM_SPMOVERRIDER = _csaccess.CS_STM_SPMOVERRIDER
CS_STM_SPTRIGCSR = _csaccess.CS_STM_SPTRIGCSR
CS_STM_TCSR = _csaccess.CS_STM_TCSR
CS_STM_TCSR_EN = _csaccess.CS_STM_TCSR_EN
CS_STM_TCSR_TSEN = _csaccess.CS_STM_TCSR_TSEN
CS_STM_TCSR_SYNCEN = _csaccess.CS_STM_TCSR_SYNCEN
CS_STM_TCSR_HWTEN = _csaccess.CS_STM_TCSR_HWTEN
CS_STM_TCSR_SWOEN = _csaccess.CS_STM_TCSR_SWOEN
CS_STM_TCSR_COMPEN = _csaccess.CS_STM_TCSR_COMPEN
CS_STM_TCSR_BUSY = _csaccess.CS_STM_TCSR_BUSY
CS_STM_TSSTIMR = _csaccess.CS_STM_TSSTIMR
CS_STM_TSFREQR = _csaccess.CS_STM_TSFREQR
CS_STM_SYNCR = _csaccess.CS_STM_SYNCR
CS_STM_FEAT1R = _csaccess.CS_STM_FEAT1R
CS_STM_FEAT2R = _csaccess.CS_STM_FEAT2R
CS_STM_FEAT3R = _csaccess.CS_STM_FEAT3R
CS_STM_DEVID = _csaccess.CS_STM_DEVID
CS_TPIU_FLFMT_STATUS = _csaccess.CS_TPIU_FLFMT_STATUS
CS_TPIU_FLFMT_STATUS_FtStopped = _csaccess.CS_TPIU_FLFMT_STATUS_FtStopped
CS_TPIU_FLFMT_STATUS_FlInProg = _csaccess.CS_TPIU_FLFMT_STATUS_FlInProg
CS_TPIU_FLFMT_CTRL = _csaccess.CS_TPIU_FLFMT_CTRL
CS_TPIU_FLFMT_CTRL_StopFl = _csaccess.CS_TPIU_FLFMT_CTRL_StopFl
CS_TPIU_FLFMT_CTRL_FOnMan = _csaccess.CS_TPIU_FLFMT_CTRL_FOnMan
CS_SWO_FLFMT_STATUS = _csaccess.CS_SWO_FLFMT_STATUS
CS_SWO_FLFMT_CTRL = _csaccess.CS_SWO_FLFMT_CTRL
CS_ETB_RAM_DEPTH = _csaccess.CS_ETB_RAM_DEPTH
CS_ETB_RAW_WIDTH = _csaccess.CS_ETB_RAW_WIDTH
CS_ETB_STATUS = _csaccess.CS_ETB_STATUS
CS_ETB_STATUS_FtEmpty = _csaccess.CS_ETB_STATUS_FtEmpty
CS_ETB_STATUS_AcqComp = _csaccess.CS_ETB_STATUS_AcqComp
CS_ETB_STATUS_Triggered = _csaccess.CS_ETB_STATUS_Triggered
CS_ETB_STATUS_Full = _csaccess.CS_ETB_STATUS_Full
CS_ETB_RAM_DATA = _csaccess.CS_ETB_RAM_DATA
CS_ETB_RAM_RD_PTR = _csaccess.CS_ETB_RAM_RD_PTR
CS_ETB_RAM_WR_PTR = _csaccess.CS_ETB_RAM_WR_PTR
CS_ETB_TRIGGER_COUNT = _csaccess.CS_ETB_TRIGGER_COUNT
CS_ETB_CTRL = _csaccess.CS_ETB_CTRL
CS_ETB_CTRL_TraceCaptEn = _csaccess.CS_ETB_CTRL_TraceCaptEn
CS_ETB_RAM_WRITE_DATA = _csaccess.CS_ETB_RAM_WRITE_DATA
CS_ETB_FLFMT_STATUS = _csaccess.CS_ETB_FLFMT_STATUS
CS_ETB_FLFMT_CTRL = _csaccess.CS_ETB_FLFMT_CTRL
CS_ETB_FLFMT_CTRL_StopTrig = _csaccess.CS_ETB_FLFMT_CTRL_StopTrig
CS_ETB_FLFMT_CTRL_StopFl = _csaccess.CS_ETB_FLFMT_CTRL_StopFl
CS_ETB_FLFMT_CTRL_TrigFl = _csaccess.CS_ETB_FLFMT_CTRL_TrigFl
CS_ETB_FLFMT_CTRL_TrigEvt = _csaccess.CS_ETB_FLFMT_CTRL_TrigEvt
CS_ETB_FLFMT_CTRL_TrigIn = _csaccess.CS_ETB_FLFMT_CTRL_TrigIn
CS_ETB_FLFMT_CTRL_FOnMan = _csaccess.CS_ETB_FLFMT_CTRL_FOnMan
CS_ETB_FLFMT_CTRL_FOnTrig = _csaccess.CS_ETB_FLFMT_CTRL_FOnTrig
CS_ETB_FLFMT_CTRL_FOnFlIn = _csaccess.CS_ETB_FLFMT_CTRL_FOnFlIn
CS_ETB_FLFMT_CTRL_EnFCont = _csaccess.CS_ETB_FLFMT_CTRL_EnFCont
CS_ETB_FLFMT_CTRL_EnFTC = _csaccess.CS_ETB_FLFMT_CTRL_EnFTC
CS_ETB_FLFMT_STATUS_FtStopped = _csaccess.CS_ETB_FLFMT_STATUS_FtStopped
CS_ETB_FLFMT_STATUS_FlInProg = _csaccess.CS_ETB_FLFMT_STATUS_FlInProg
CS_TMC_STATUS_Empty = _csaccess.CS_TMC_STATUS_Empty
CS_TMC_STATUS_TMCReady = _csaccess.CS_TMC_STATUS_TMCReady
CS_TMC_MODE = _csaccess.CS_TMC_MODE
CS_TMC_MODE_CIRCULAR = _csaccess.CS_TMC_MODE_CIRCULAR
CS_TMC_MODE_SWFIFO = _csaccess.CS_TMC_MODE_SWFIFO
CS_TMC_MODE_HWFIFO = _csaccess.CS_TMC_MODE_HWFIFO
CS_TMC_LBUFLEVEL = _csaccess.CS_TMC_LBUFLEVEL
CS_TMC_CBUFLEVEL = _csaccess.CS_TMC_CBUFLEVEL
CS_TMC_BUFWM = _csaccess.CS_TMC_BUFWM
CS_TMC_RRPHI = _csaccess.CS_TMC_RRPHI
CS_TMC_RWPHI = _csaccess.CS_TMC_RWPHI
CS_TMC_AXICTL = _csaccess.CS_TMC_AXICTL
CS_TMC_DBALO = _csaccess.CS_TMC_DBALO
CS_TMC_DBAHI = _csaccess.CS_TMC_DBAHI
CS_TMC_CONFIG_TYPE_ETB = _csaccess.CS_TMC_CONFIG_TYPE_ETB
CS_TMC_CONFIG_TYPE_ETR = _csaccess.CS_TMC_CONFIG_TYPE_ETR
CS_TMC_CONFIG_TYPE_ETF = _csaccess.CS_TMC_CONFIG_TYPE_ETF
CS_FUNNEL_CTRL = _csaccess.CS_FUNNEL_CTRL
CS_FUNNEL_MAX_PORTS = _csaccess.CS_FUNNEL_MAX_PORTS
CS_REPLICATOR_IDFILTER0 = _csaccess.CS_REPLICATOR_IDFILTER0
CS_REPLICATOR_IDFILTER1 = _csaccess.CS_REPLICATOR_IDFILTER1
CS_CTICONTROL = _csaccess.CS_CTICONTROL
CS_CTICONTROL_GLBEN = _csaccess.CS_CTICONTROL_GLBEN
CS_CTIAPPSET = _csaccess.CS_CTIAPPSET
CS_CTIAPPCLEAR = _csaccess.CS_CTIAPPCLEAR
CS_CTIAPPPULSE = _csaccess.CS_CTIAPPPULSE
CS_CTITRIGINSTATUS = _csaccess.CS_CTITRIGINSTATUS
CS_CTITRIGOUTSTATUS = _csaccess.CS_CTITRIGOUTSTATUS
CS_CTICHINSTATUS = _csaccess.CS_CTICHINSTATUS
CS_CTICHOUTSTATUS = _csaccess.CS_CTICHOUTSTATUS
CS_CTIGATE = _csaccess.CS_CTIGATE
CS_CTI_CHAN0_EN = _csaccess.CS_CTI_CHAN0_EN
CS_CTI_CHAN1_EN = _csaccess.CS_CTI_CHAN1_EN
CS_CTI_CHAN2_EN = _csaccess.CS_CTI_CHAN2_EN
CS_CTI_CHAN3_EN = _csaccess.CS_CTI_CHAN3_EN
CS_CNTCR = _csaccess.CS_CNTCR
CS_CNTCR_ENA = _csaccess.CS_CNTCR_ENA
CS_CNTCR_HDBG = _csaccess.CS_CNTCR_HDBG
CS_CNTSR = _csaccess.CS_CNTSR
CS_CNTSR_DBGH = _csaccess.CS_CNTSR_DBGH
CS_CNTCVL = _csaccess.CS_CNTCVL
CS_CNTCVU = _csaccess.CS_CNTCVU
CS_CNTFID0 = _csaccess.CS_CNTFID0
CS_RO_CNTCVL = _csaccess.CS_RO_CNTCVL
CS_RO_CNTCVU = _csaccess.CS_RO_CNTCVU
CS_DBGDIDR = _csaccess.CS_DBGDIDR
CS_DBGDIDR_PCSR_imp = _csaccess.CS_DBGDIDR_PCSR_imp
CS_DBGDIDR_DEVID_imp = _csaccess.CS_DBGDIDR_DEVID_imp
CS_DBGWFAR = _csaccess.CS_DBGWFAR
CS_DBGVCR = _csaccess.CS_DBGVCR
CS_DBGECR = _csaccess.CS_DBGECR
CS_DBGDSCCR = _csaccess.CS_DBGDSCCR
CS_DBGDSMCR = _csaccess.CS_DBGDSMCR
CS_DBGDTRRX = _csaccess.CS_DBGDTRRX
CS_DBGPCSR_33 = _csaccess.CS_DBGPCSR_33
CS_DBGITR = _csaccess.CS_DBGITR
CS_DBGDSCR = _csaccess.CS_DBGDSCR
CS_DBGDSCR_HALTED = _csaccess.CS_DBGDSCR_HALTED
CS_DBGDSCR_RESTARTED = _csaccess.CS_DBGDSCR_RESTARTED
CS_DBGDSCR_SDABORT_l = _csaccess.CS_DBGDSCR_SDABORT_l
CS_DBGDSCR_ADABORT_l = _csaccess.CS_DBGDSCR_ADABORT_l
CS_DBGDSCR_ITRen = _csaccess.CS_DBGDSCR_ITRen
CS_DBGDSCR_HDBGen = _csaccess.CS_DBGDSCR_HDBGen
CS_DBGDSCR_MDBGen = _csaccess.CS_DBGDSCR_MDBGen
CS_DBGDSCR_NS = _csaccess.CS_DBGDSCR_NS
CS_DBGDSCR_InstrCompl_l = _csaccess.CS_DBGDSCR_InstrCompl_l
CS_DBGDSCR_PipeAdv = _csaccess.CS_DBGDSCR_PipeAdv
CS_DBGDSCR_TXfull = _csaccess.CS_DBGDSCR_TXfull
CS_DBGDSCR_RXfull = _csaccess.CS_DBGDSCR_RXfull
CS_DBGDTRTX = _csaccess.CS_DBGDTRTX
CS_DBGDRCR = _csaccess.CS_DBGDRCR
CS_DBGDRCR_HRQ = _csaccess.CS_DBGDRCR_HRQ
CS_DBGDRCR_RRQ = _csaccess.CS_DBGDRCR_RRQ
CS_DBGDRCR_CSE = _csaccess.CS_DBGDRCR_CSE
CS_DBGDRCR_CSPA = _csaccess.CS_DBGDRCR_CSPA
CS_DBGDRCR_CBRRQ = _csaccess.CS_DBGDRCR_CBRRQ
CS_DBGPCSR_40 = _csaccess.CS_DBGPCSR_40
CS_DBGCIDSR = _csaccess.CS_DBGCIDSR
CS_DBGVIDSR = _csaccess.CS_DBGVIDSR
CS_DBGPRCR = _csaccess.CS_DBGPRCR
CS_DBGPRSR = _csaccess.CS_DBGPRSR
CS_DBGPRSR_HALTED = _csaccess.CS_DBGPRSR_HALTED
CS_DBGAUTHSTATUS = _csaccess.CS_DBGAUTHSTATUS
CS_DBGDEVID = _csaccess.CS_DBGDEVID
CS_DBGDEVID1 = _csaccess.CS_DBGDEVID1
CS_V8EDPCSR_l = _csaccess.CS_V8EDPCSR_l
CS_V8EDCIDSR = _csaccess.CS_V8EDCIDSR
CS_V8EDVIDSR = _csaccess.CS_V8EDVIDSR
CS_V8EDPCSR_h = _csaccess.CS_V8EDPCSR_h
CS_V8EDPRSR = _csaccess.CS_V8EDPRSR
CS_V8EDPRSR_PWRUP = _csaccess.CS_V8EDPRSR_PWRUP
CS_V8EDPRSR_RESET = _csaccess.CS_V8EDPRSR_RESET
CS_V8EDPRSR_HALTED = _csaccess.CS_V8EDPRSR_HALTED
CS_V8EDPRSR_OSLK = _csaccess.CS_V8EDPRSR_OSLK
CS_V8EDPRSR_DLK = _csaccess.CS_V8EDPRSR_DLK
CS_V8EDPRSR_EPMAD = _csaccess.CS_V8EDPRSR_EPMAD
CS_V8EDPRSR_COREOK_MSK = _csaccess.CS_V8EDPRSR_COREOK_MSK
CS_V8EDPRSR_COREOK_VAL = _csaccess.CS_V8EDPRSR_COREOK_VAL
CS_V8EDPFR_l = _csaccess.CS_V8EDPFR_l
CS_V8EDDFR_l = _csaccess.CS_V8EDDFR_l
CS_V8EDDEVID = _csaccess.CS_V8EDDEVID
CS_V8EDDEVID_SMPL_MSK = _csaccess.CS_V8EDDEVID_SMPL_MSK
CS_V8EDDEVID_SMPL_NONE = _csaccess.CS_V8EDDEVID_SMPL_NONE
CS_V8EDDEVID_SMPL_P_C = _csaccess.CS_V8EDDEVID_SMPL_P_C
CS_V8EDDEVID_SMPL_P_C_V = _csaccess.CS_V8EDDEVID_SMPL_P_C_V
CS_PMCCNTR = _csaccess.CS_PMCCNTR
CS_PMXEVTYPER31 = _csaccess.CS_PMXEVTYPER31
CS_PMCNTENSET = _csaccess.CS_PMCNTENSET
CS_PMCNTENCLR = _csaccess.CS_PMCNTENCLR
CS_PMINTENSET = _csaccess.CS_PMINTENSET
CS_PMINTENCLR = _csaccess.CS_PMINTENCLR
CS_PMOVSR = _csaccess.CS_PMOVSR
CS_PMSWINC = _csaccess.CS_PMSWINC
CS_PMOVSSET = _csaccess.CS_PMOVSSET
CS_PMCFGR = _csaccess.CS_PMCFGR
CS_PMCR = _csaccess.CS_PMCR
CS_PMCR_E = _csaccess.CS_PMCR_E
CS_PMCR_P = _csaccess.CS_PMCR_P
CS_PMCR_C = _csaccess.CS_PMCR_C
CS_PMCR_D = _csaccess.CS_PMCR_D
CS_PMCR_X = _csaccess.CS_PMCR_X
CS_PMUSERENR = _csaccess.CS_PMUSERENR
CS_PMCEID0 = _csaccess.CS_PMCEID0
CS_PMCEID1 = _csaccess.CS_PMCEID1
CS_PMAUTHSTATUS = _csaccess.CS_PMAUTHSTATUS
UNIX_USERSPACE = _csaccess.UNIX_USERSPACE
CS_PHYSFMT = _csaccess.CS_PHYSFMT
CS_VAFMT = _csaccess.CS_VAFMT
CS_DEVCLASS_SOURCE = _csaccess.CS_DEVCLASS_SOURCE
CS_DEVCLASS_SINK = _csaccess.CS_DEVCLASS_SINK
CS_DEVCLASS_DEBUG = _csaccess.CS_DEVCLASS_DEBUG
CS_DEVCLASS_PMU = _csaccess.CS_DEVCLASS_PMU
CS_DEVCLASS_CTI = _csaccess.CS_DEVCLASS_CTI
CS_DEVCLASS_LINK = _csaccess.CS_DEVCLASS_LINK
CS_DEVCLASS_CPU = _csaccess.CS_DEVCLASS_CPU
CS_DEVCLASS_TIMESTAMP = _csaccess.CS_DEVCLASS_TIMESTAMP
CS_DEVCLASS_BUFFER = _csaccess.CS_DEVCLASS_BUFFER
CS_DEVCLASS_PORT = _csaccess.CS_DEVCLASS_PORT
CS_DEVCLASS_SWSTIM = _csaccess.CS_DEVCLASS_SWSTIM
CS_DEVCLASS_ELA = _csaccess.CS_DEVCLASS_ELA
CS_DEVCLASS_TRIGSRC = _csaccess.CS_DEVCLASS_TRIGSRC
DEV_UNKNOWN = _csaccess.DEV_UNKNOWN
DEV_ETM = _csaccess.DEV_ETM
DEV_ITM = _csaccess.DEV_ITM
DEV_STM = _csaccess.DEV_STM
DEV_FUNNEL = _csaccess.DEV_FUNNEL
DEV_REPLICATOR = _csaccess.DEV_REPLICATOR
DEV_ETF = _csaccess.DEV_ETF
DEV_ETB = _csaccess.DEV_ETB
DEV_TPIU = _csaccess.DEV_TPIU
DEV_SWO = _csaccess.DEV_SWO
DEV_CTI = _csaccess.DEV_CTI
DEV_CPU_DEBUG = _csaccess.DEV_CPU_DEBUG
DEV_CPU_PMU = _csaccess.DEV_CPU_PMU
DEV_TS = _csaccess.DEV_TS
DEV_ELA = _csaccess.DEV_ELA
DEV_MAX = _csaccess.DEV_MAX
CS_REG_WAITBITS_ALL_1 = _csaccess.CS_REG_WAITBITS_ALL_1
CS_REG_WAITBITS_ANY_1 = _csaccess.CS_REG_WAITBITS_ANY_1
CS_REG_WAITBITS_ALL_0 = _csaccess.CS_REG_WAITBITS_ALL_0
CS_REG_WAITBITS_ANY_0 = _csaccess.CS_REG_WAITBITS_ANY_0
CS_REG_WAITBITS_PTTRN = _csaccess.CS_REG_WAITBITS_PTTRN
CS_REG_WAITBITS_END = _csaccess.CS_REG_WAITBITS_END
LIB_MAX_CPU_DEVICES = _csaccess.LIB_MAX_CPU_DEVICES

def cs_cti_enable(dev):
    return _csaccess.cs_cti_enable(dev)
cs_cti_enable = _csaccess.cs_cti_enable

def cs_cti_disable(dev):
    return _csaccess.cs_cti_disable(dev)
cs_cti_disable = _csaccess.cs_cti_disable

def cs_cti_set_trigin_channels(cti, ctiport, mask):
    return _csaccess.cs_cti_set_trigin_channels(cti, ctiport, mask)
cs_cti_set_trigin_channels = _csaccess.cs_cti_set_trigin_channels

def cs_cti_set_trigout_channels(cti, ctiport, mask):
    return _csaccess.cs_cti_set_trigout_channels(cti, ctiport, mask)
cs_cti_set_trigout_channels = _csaccess.cs_cti_set_trigout_channels

def cs_cti_set_global_channels(cti, mask):
    return _csaccess.cs_cti_set_global_channels(cti, mask)
cs_cti_set_global_channels = _csaccess.cs_cti_set_global_channels

def cs_cti_used_channels(cti):
    return _csaccess.cs_cti_used_channels(cti)
cs_cti_used_channels = _csaccess.cs_cti_used_channels

def cs_cti_pulse_channel(cti, channel):
    return _csaccess.cs_cti_pulse_channel(cti, channel)
cs_cti_pulse_channel = _csaccess.cs_cti_pulse_channel

def cs_cti_set_active_channel(cti, channel):
    return _csaccess.cs_cti_set_active_channel(cti, channel)
cs_cti_set_active_channel = _csaccess.cs_cti_set_active_channel

def cs_cti_clear_active_channel(cti, channel):
    return _csaccess.cs_cti_clear_active_channel(cti, channel)
cs_cti_clear_active_channel = _csaccess.cs_cti_clear_active_channel

def cs_cti_clear_all_active_channels(cti):
    return _csaccess.cs_cti_clear_all_active_channels(cti)
cs_cti_clear_all_active_channels = _csaccess.cs_cti_clear_all_active_channels

def cs_cti_trigin_status(cti):
    return _csaccess.cs_cti_trigin_status(cti)
cs_cti_trigin_status = _csaccess.cs_cti_trigin_status

def cs_cti_trigout_status(cti):
    return _csaccess.cs_cti_trigout_status(cti)
cs_cti_trigout_status = _csaccess.cs_cti_trigout_status

def cs_cti_reset(cti):
    return _csaccess.cs_cti_reset(cti)
cs_cti_reset = _csaccess.cs_cti_reset

def cs_cti_diag():
    return _csaccess.cs_cti_diag()
cs_cti_diag = _csaccess.cs_cti_diag
class cs_trigsrc_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cs_trigsrc_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cs_trigsrc_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cti"] = _csaccess.cs_trigsrc_t_cti_set
    __swig_getmethods__["cti"] = _csaccess.cs_trigsrc_t_cti_get
    if _newclass:
        cti = _swig_property(_csaccess.cs_trigsrc_t_cti_get, _csaccess.cs_trigsrc_t_cti_set)
    __swig_setmethods__["ctiport"] = _csaccess.cs_trigsrc_t_ctiport_set
    __swig_getmethods__["ctiport"] = _csaccess.cs_trigsrc_t_ctiport_get
    if _newclass:
        ctiport = _swig_property(_csaccess.cs_trigsrc_t_ctiport_get, _csaccess.cs_trigsrc_t_ctiport_set)

    def __init__(self):
        this = _csaccess.new_cs_trigsrc_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_cs_trigsrc_t
    __del__ = lambda self: None
cs_trigsrc_t_swigregister = _csaccess.cs_trigsrc_t_swigregister
cs_trigsrc_t_swigregister(cs_trigsrc_t)

class cs_trigdst_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cs_trigdst_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cs_trigdst_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cti"] = _csaccess.cs_trigdst_t_cti_set
    __swig_getmethods__["cti"] = _csaccess.cs_trigdst_t_cti_get
    if _newclass:
        cti = _swig_property(_csaccess.cs_trigdst_t_cti_get, _csaccess.cs_trigdst_t_cti_set)
    __swig_setmethods__["ctiport"] = _csaccess.cs_trigdst_t_ctiport_set
    __swig_getmethods__["ctiport"] = _csaccess.cs_trigdst_t_ctiport_get
    if _newclass:
        ctiport = _swig_property(_csaccess.cs_trigdst_t_ctiport_get, _csaccess.cs_trigdst_t_ctiport_set)

    def __init__(self):
        this = _csaccess.new_cs_trigdst_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_cs_trigdst_t
    __del__ = lambda self: None
cs_trigdst_t_swigregister = _csaccess.cs_trigdst_t_swigregister
cs_trigdst_t_swigregister(cs_trigdst_t)


def cs_cti_trigsrc(cti, portid):
    return _csaccess.cs_cti_trigsrc(cti, portid)
cs_cti_trigsrc = _csaccess.cs_cti_trigsrc

def cs_cti_trigdst(cti, portid):
    return _csaccess.cs_cti_trigdst(cti, portid)
cs_cti_trigdst = _csaccess.cs_cti_trigdst

def cs_trigsrc_cti(src):
    return _csaccess.cs_trigsrc_cti(src)
cs_trigsrc_cti = _csaccess.cs_trigsrc_cti

def cs_trigdst_cti(dst):
    return _csaccess.cs_trigdst_cti(dst)
cs_trigdst_cti = _csaccess.cs_trigdst_cti
CS_TRIGIN_CPU_EDBGRQ = _csaccess.CS_TRIGIN_CPU_EDBGRQ
CS_TRIGIN_CPU_DBGRESTART = _csaccess.CS_TRIGIN_CPU_DBGRESTART
CS_TRIGOUT_CPU_DBGTRIGGER = _csaccess.CS_TRIGOUT_CPU_DBGTRIGGER
CS_TRIGOUT_CPU_EXTOUT0 = _csaccess.CS_TRIGOUT_CPU_EXTOUT0
CS_TRIGIN_ETB_TRIGIN = _csaccess.CS_TRIGIN_ETB_TRIGIN
CS_TRIGIN_ETB_FLUSHIN = _csaccess.CS_TRIGIN_ETB_FLUSHIN
CS_TRIGOUT_ETB_ACQCOMP = _csaccess.CS_TRIGOUT_ETB_ACQCOMP
CS_TRIGOUT_ETB_FULL = _csaccess.CS_TRIGOUT_ETB_FULL
CS_TRIGIN_TPIU_TRIGIN = _csaccess.CS_TRIGIN_TPIU_TRIGIN
CS_TRIGIN_TPIU_FLUSHIN = _csaccess.CS_TRIGIN_TPIU_FLUSHIN
CS_TRIGOUT_ITM_TRIGOUT = _csaccess.CS_TRIGOUT_ITM_TRIGOUT
CS_TRIGOUT_STM_TRIGOUTSPTE = _csaccess.CS_TRIGOUT_STM_TRIGOUTSPTE
CS_TRIGOUT_STM_TRIGOUTSW = _csaccess.CS_TRIGOUT_STM_TRIGOUTSW
CS_TRIGOUT_STM_TRIGOUTHETE = _csaccess.CS_TRIGOUT_STM_TRIGOUTHETE
CS_TRIGOUT_STM_ASYNCOUT = _csaccess.CS_TRIGOUT_STM_ASYNCOUT
CS_TRIGIN_STM_HWEVENT_0 = _csaccess.CS_TRIGIN_STM_HWEVENT_0
CS_TRIGIN_STM_HWEVENT_1 = _csaccess.CS_TRIGIN_STM_HWEVENT_1
CS_TRIGIN_STM_HWEVENT_2 = _csaccess.CS_TRIGIN_STM_HWEVENT_2
CS_TRIGIN_STM_HWEVENT_3 = _csaccess.CS_TRIGIN_STM_HWEVENT_3

def cs_cti_connect_trigsrc(dev, devportid, src):
    return _csaccess.cs_cti_connect_trigsrc(dev, devportid, src)
cs_cti_connect_trigsrc = _csaccess.cs_cti_connect_trigsrc

def cs_cti_connect_trigdst(dst, dev, devportid):
    return _csaccess.cs_cti_connect_trigdst(dst, dev, devportid)
cs_cti_connect_trigdst = _csaccess.cs_cti_connect_trigdst

def cs_trigsrc(dev, devportid):
    return _csaccess.cs_trigsrc(dev, devportid)
cs_trigsrc = _csaccess.cs_trigsrc

def cs_trigdst(dev, devportid):
    return _csaccess.cs_trigdst(dev, devportid)
cs_trigdst = _csaccess.cs_trigdst

def cs_ect_get_channel():
    return _csaccess.cs_ect_get_channel()
cs_ect_get_channel = _csaccess.cs_ect_get_channel

def cs_ect_add_trigsrc(chan, src):
    return _csaccess.cs_ect_add_trigsrc(chan, src)
cs_ect_add_trigsrc = _csaccess.cs_ect_add_trigsrc

def cs_ect_add_trigdst(chan, dst):
    return _csaccess.cs_ect_add_trigdst(chan, dst)
cs_ect_add_trigdst = _csaccess.cs_ect_add_trigdst

def cs_ect_diag(chan):
    return _csaccess.cs_ect_diag(chan)
cs_ect_diag = _csaccess.cs_ect_diag

def cs_ect_configure(chan):
    return _csaccess.cs_ect_configure(chan)
cs_ect_configure = _csaccess.cs_ect_configure

def cs_ect_reset():
    return _csaccess.cs_ect_reset()
cs_ect_reset = _csaccess.cs_ect_reset

def cs_debug_get_pc_sample(dev, pc, cid, vmid):
    return _csaccess.cs_debug_get_pc_sample(dev, pc, cid, vmid)
cs_debug_get_pc_sample = _csaccess.cs_debug_get_pc_sample
class etm_v3_ccr_ut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etm_v3_ccr_ut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etm_v3_ccr_ut, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reg"] = _csaccess.etm_v3_ccr_ut_reg_set
    __swig_getmethods__["reg"] = _csaccess.etm_v3_ccr_ut_reg_get
    if _newclass:
        reg = _swig_property(_csaccess.etm_v3_ccr_ut_reg_get, _csaccess.etm_v3_ccr_ut_reg_set)
    __swig_getmethods__["s"] = _csaccess.etm_v3_ccr_ut_s_get
    if _newclass:
        s = _swig_property(_csaccess.etm_v3_ccr_ut_s_get)
    __swig_getmethods__["s3x"] = _csaccess.etm_v3_ccr_ut_s3x_get
    if _newclass:
        s3x = _swig_property(_csaccess.etm_v3_ccr_ut_s3x_get)

    def __init__(self):
        this = _csaccess.new_etm_v3_ccr_ut()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etm_v3_ccr_ut
    __del__ = lambda self: None
etm_v3_ccr_ut_swigregister = _csaccess.etm_v3_ccr_ut_swigregister
etm_v3_ccr_ut_swigregister(etm_v3_ccr_ut)

class etmv3_ccr_s3x(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etmv3_ccr_s3x, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etmv3_ccr_s3x, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_common"] = _csaccess.etmv3_ccr_s3x__common_set
    __swig_getmethods__["_common"] = _csaccess.etmv3_ccr_s3x__common_get
    if _newclass:
        _common = _swig_property(_csaccess.etmv3_ccr_s3x__common_get, _csaccess.etmv3_ccr_s3x__common_set)
    __swig_setmethods__["n_cxid_comp"] = _csaccess.etmv3_ccr_s3x_n_cxid_comp_set
    __swig_getmethods__["n_cxid_comp"] = _csaccess.etmv3_ccr_s3x_n_cxid_comp_get
    if _newclass:
        n_cxid_comp = _swig_property(_csaccess.etmv3_ccr_s3x_n_cxid_comp_get, _csaccess.etmv3_ccr_s3x_n_cxid_comp_set)
    __swig_setmethods__["tssb_present"] = _csaccess.etmv3_ccr_s3x_tssb_present_set
    __swig_getmethods__["tssb_present"] = _csaccess.etmv3_ccr_s3x_tssb_present_get
    if _newclass:
        tssb_present = _swig_property(_csaccess.etmv3_ccr_s3x_tssb_present_get, _csaccess.etmv3_ccr_s3x_tssb_present_set)

    def __init__(self):
        this = _csaccess.new_etmv3_ccr_s3x()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etmv3_ccr_s3x
    __del__ = lambda self: None
etmv3_ccr_s3x_swigregister = _csaccess.etmv3_ccr_s3x_swigregister
etmv3_ccr_s3x_swigregister(etmv3_ccr_s3x)

class etmv3_ccr_s(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etmv3_ccr_s, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etmv3_ccr_s, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_addr_comp_pairs"] = _csaccess.etmv3_ccr_s_n_addr_comp_pairs_set
    __swig_getmethods__["n_addr_comp_pairs"] = _csaccess.etmv3_ccr_s_n_addr_comp_pairs_get
    if _newclass:
        n_addr_comp_pairs = _swig_property(_csaccess.etmv3_ccr_s_n_addr_comp_pairs_get, _csaccess.etmv3_ccr_s_n_addr_comp_pairs_set)
    __swig_setmethods__["n_data_comp"] = _csaccess.etmv3_ccr_s_n_data_comp_set
    __swig_getmethods__["n_data_comp"] = _csaccess.etmv3_ccr_s_n_data_comp_get
    if _newclass:
        n_data_comp = _swig_property(_csaccess.etmv3_ccr_s_n_data_comp_get, _csaccess.etmv3_ccr_s_n_data_comp_set)
    __swig_setmethods__["n_memory_map_decoders"] = _csaccess.etmv3_ccr_s_n_memory_map_decoders_set
    __swig_getmethods__["n_memory_map_decoders"] = _csaccess.etmv3_ccr_s_n_memory_map_decoders_get
    if _newclass:
        n_memory_map_decoders = _swig_property(_csaccess.etmv3_ccr_s_n_memory_map_decoders_get, _csaccess.etmv3_ccr_s_n_memory_map_decoders_set)
    __swig_setmethods__["n_counters"] = _csaccess.etmv3_ccr_s_n_counters_set
    __swig_getmethods__["n_counters"] = _csaccess.etmv3_ccr_s_n_counters_get
    if _newclass:
        n_counters = _swig_property(_csaccess.etmv3_ccr_s_n_counters_get, _csaccess.etmv3_ccr_s_n_counters_set)
    __swig_setmethods__["sequencer_present"] = _csaccess.etmv3_ccr_s_sequencer_present_set
    __swig_getmethods__["sequencer_present"] = _csaccess.etmv3_ccr_s_sequencer_present_get
    if _newclass:
        sequencer_present = _swig_property(_csaccess.etmv3_ccr_s_sequencer_present_get, _csaccess.etmv3_ccr_s_sequencer_present_set)
    __swig_setmethods__["n_ext_in"] = _csaccess.etmv3_ccr_s_n_ext_in_set
    __swig_getmethods__["n_ext_in"] = _csaccess.etmv3_ccr_s_n_ext_in_get
    if _newclass:
        n_ext_in = _swig_property(_csaccess.etmv3_ccr_s_n_ext_in_get, _csaccess.etmv3_ccr_s_n_ext_in_set)
    __swig_setmethods__["n_ext_out"] = _csaccess.etmv3_ccr_s_n_ext_out_set
    __swig_getmethods__["n_ext_out"] = _csaccess.etmv3_ccr_s_n_ext_out_get
    if _newclass:
        n_ext_out = _swig_property(_csaccess.etmv3_ccr_s_n_ext_out_get, _csaccess.etmv3_ccr_s_n_ext_out_set)
    __swig_setmethods__["fifofull_present"] = _csaccess.etmv3_ccr_s_fifofull_present_set
    __swig_getmethods__["fifofull_present"] = _csaccess.etmv3_ccr_s_fifofull_present_get
    if _newclass:
        fifofull_present = _swig_property(_csaccess.etmv3_ccr_s_fifofull_present_get, _csaccess.etmv3_ccr_s_fifofull_present_set)
    __swig_setmethods__["_variant"] = _csaccess.etmv3_ccr_s__variant_set
    __swig_getmethods__["_variant"] = _csaccess.etmv3_ccr_s__variant_get
    if _newclass:
        _variant = _swig_property(_csaccess.etmv3_ccr_s__variant_get, _csaccess.etmv3_ccr_s__variant_set)
    __swig_setmethods__["etmid_present"] = _csaccess.etmv3_ccr_s_etmid_present_set
    __swig_getmethods__["etmid_present"] = _csaccess.etmv3_ccr_s_etmid_present_get
    if _newclass:
        etmid_present = _swig_property(_csaccess.etmv3_ccr_s_etmid_present_get, _csaccess.etmv3_ccr_s_etmid_present_set)

    def __init__(self):
        this = _csaccess.new_etmv3_ccr_s()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etmv3_ccr_s
    __del__ = lambda self: None
etmv3_ccr_s_swigregister = _csaccess.etmv3_ccr_s_swigregister
etmv3_ccr_s_swigregister(etmv3_ccr_s)

class etm_v3_scr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etm_v3_scr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etm_v3_scr_t, name)
    __repr__ = _swig_repr
    __swig_getmethods__["raw"] = _csaccess.etm_v3_scr_t_raw_get
    if _newclass:
        raw = _swig_property(_csaccess.etm_v3_scr_t_raw_get)
    __swig_setmethods__["max_port_size"] = _csaccess.etm_v3_scr_t_max_port_size_set
    __swig_getmethods__["max_port_size"] = _csaccess.etm_v3_scr_t_max_port_size_get
    if _newclass:
        max_port_size = _swig_property(_csaccess.etm_v3_scr_t_max_port_size_get, _csaccess.etm_v3_scr_t_max_port_size_set)

    def __init__(self):
        this = _csaccess.new_etm_v3_scr_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etm_v3_scr_t
    __del__ = lambda self: None
etm_v3_scr_t_swigregister = _csaccess.etm_v3_scr_t_swigregister
etm_v3_scr_t_swigregister(etm_v3_scr_t)

class etm_v3_scr_raw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etm_v3_scr_raw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etm_v3_scr_raw, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reg"] = _csaccess.etm_v3_scr_raw_reg_set
    __swig_getmethods__["reg"] = _csaccess.etm_v3_scr_raw_reg_get
    if _newclass:
        reg = _swig_property(_csaccess.etm_v3_scr_raw_reg_get, _csaccess.etm_v3_scr_raw_reg_set)
    __swig_getmethods__["sc"] = _csaccess.etm_v3_scr_raw_sc_get
    if _newclass:
        sc = _swig_property(_csaccess.etm_v3_scr_raw_sc_get)
    __swig_getmethods__["sc3x"] = _csaccess.etm_v3_scr_raw_sc3x_get
    if _newclass:
        sc3x = _swig_property(_csaccess.etm_v3_scr_raw_sc3x_get)

    def __init__(self):
        this = _csaccess.new_etm_v3_scr_raw()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etm_v3_scr_raw
    __del__ = lambda self: None
etm_v3_scr_raw_swigregister = _csaccess.etm_v3_scr_raw_swigregister
etm_v3_scr_raw_swigregister(etm_v3_scr_raw)

class etm_v3_scr_raw_sc3x(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etm_v3_scr_raw_sc3x, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etm_v3_scr_raw_sc3x, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_port_size_20"] = _csaccess.etm_v3_scr_raw_sc3x_max_port_size_20_set
    __swig_getmethods__["max_port_size_20"] = _csaccess.etm_v3_scr_raw_sc3x_max_port_size_20_get
    if _newclass:
        max_port_size_20 = _swig_property(_csaccess.etm_v3_scr_raw_sc3x_max_port_size_20_get, _csaccess.etm_v3_scr_raw_sc3x_max_port_size_20_set)
    __swig_setmethods__["_common_0"] = _csaccess.etm_v3_scr_raw_sc3x__common_0_set
    __swig_getmethods__["_common_0"] = _csaccess.etm_v3_scr_raw_sc3x__common_0_get
    if _newclass:
        _common_0 = _swig_property(_csaccess.etm_v3_scr_raw_sc3x__common_0_get, _csaccess.etm_v3_scr_raw_sc3x__common_0_set)
    __swig_setmethods__["max_port_size_3"] = _csaccess.etm_v3_scr_raw_sc3x_max_port_size_3_set
    __swig_getmethods__["max_port_size_3"] = _csaccess.etm_v3_scr_raw_sc3x_max_port_size_3_get
    if _newclass:
        max_port_size_3 = _swig_property(_csaccess.etm_v3_scr_raw_sc3x_max_port_size_3_get, _csaccess.etm_v3_scr_raw_sc3x_max_port_size_3_set)
    __swig_setmethods__["cur_port_size_supported"] = _csaccess.etm_v3_scr_raw_sc3x_cur_port_size_supported_set
    __swig_getmethods__["cur_port_size_supported"] = _csaccess.etm_v3_scr_raw_sc3x_cur_port_size_supported_get
    if _newclass:
        cur_port_size_supported = _swig_property(_csaccess.etm_v3_scr_raw_sc3x_cur_port_size_supported_get, _csaccess.etm_v3_scr_raw_sc3x_cur_port_size_supported_set)
    __swig_setmethods__["cur_port_mode_supported"] = _csaccess.etm_v3_scr_raw_sc3x_cur_port_mode_supported_set
    __swig_getmethods__["cur_port_mode_supported"] = _csaccess.etm_v3_scr_raw_sc3x_cur_port_mode_supported_get
    if _newclass:
        cur_port_mode_supported = _swig_property(_csaccess.etm_v3_scr_raw_sc3x_cur_port_mode_supported_get, _csaccess.etm_v3_scr_raw_sc3x_cur_port_mode_supported_set)
    __swig_setmethods__["_common_1"] = _csaccess.etm_v3_scr_raw_sc3x__common_1_set
    __swig_getmethods__["_common_1"] = _csaccess.etm_v3_scr_raw_sc3x__common_1_get
    if _newclass:
        _common_1 = _swig_property(_csaccess.etm_v3_scr_raw_sc3x__common_1_get, _csaccess.etm_v3_scr_raw_sc3x__common_1_set)
    __swig_setmethods__["no_fetch_comp"] = _csaccess.etm_v3_scr_raw_sc3x_no_fetch_comp_set
    __swig_getmethods__["no_fetch_comp"] = _csaccess.etm_v3_scr_raw_sc3x_no_fetch_comp_get
    if _newclass:
        no_fetch_comp = _swig_property(_csaccess.etm_v3_scr_raw_sc3x_no_fetch_comp_get, _csaccess.etm_v3_scr_raw_sc3x_no_fetch_comp_set)

    def __init__(self):
        this = _csaccess.new_etm_v3_scr_raw_sc3x()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etm_v3_scr_raw_sc3x
    __del__ = lambda self: None
etm_v3_scr_raw_sc3x_swigregister = _csaccess.etm_v3_scr_raw_sc3x_swigregister
etm_v3_scr_raw_sc3x_swigregister(etm_v3_scr_raw_sc3x)

class etm_v3_scr_raw_sc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etm_v3_scr_raw_sc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etm_v3_scr_raw_sc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_variant_0"] = _csaccess.etm_v3_scr_raw_sc__variant_0_set
    __swig_getmethods__["_variant_0"] = _csaccess.etm_v3_scr_raw_sc__variant_0_get
    if _newclass:
        _variant_0 = _swig_property(_csaccess.etm_v3_scr_raw_sc__variant_0_get, _csaccess.etm_v3_scr_raw_sc__variant_0_set)
    __swig_setmethods__["fifofull"] = _csaccess.etm_v3_scr_raw_sc_fifofull_set
    __swig_getmethods__["fifofull"] = _csaccess.etm_v3_scr_raw_sc_fifofull_get
    if _newclass:
        fifofull = _swig_property(_csaccess.etm_v3_scr_raw_sc_fifofull_get, _csaccess.etm_v3_scr_raw_sc_fifofull_set)
    __swig_setmethods__["_variant_1"] = _csaccess.etm_v3_scr_raw_sc__variant_1_set
    __swig_getmethods__["_variant_1"] = _csaccess.etm_v3_scr_raw_sc__variant_1_get
    if _newclass:
        _variant_1 = _swig_property(_csaccess.etm_v3_scr_raw_sc__variant_1_get, _csaccess.etm_v3_scr_raw_sc__variant_1_set)
    __swig_setmethods__["n_supported_proc"] = _csaccess.etm_v3_scr_raw_sc_n_supported_proc_set
    __swig_getmethods__["n_supported_proc"] = _csaccess.etm_v3_scr_raw_sc_n_supported_proc_get
    if _newclass:
        n_supported_proc = _swig_property(_csaccess.etm_v3_scr_raw_sc_n_supported_proc_get, _csaccess.etm_v3_scr_raw_sc_n_supported_proc_set)

    def __init__(self):
        this = _csaccess.new_etm_v3_scr_raw_sc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etm_v3_scr_raw_sc
    __del__ = lambda self: None
etm_v3_scr_raw_sc_swigregister = _csaccess.etm_v3_scr_raw_sc_swigregister
etm_v3_scr_raw_sc_swigregister(etm_v3_scr_raw_sc)

class etm_v3_ccer_ut(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etm_v3_ccer_ut, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etm_v3_ccer_ut, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reg"] = _csaccess.etm_v3_ccer_ut_reg_set
    __swig_getmethods__["reg"] = _csaccess.etm_v3_ccer_ut_reg_get
    if _newclass:
        reg = _swig_property(_csaccess.etm_v3_ccer_ut_reg_get, _csaccess.etm_v3_ccer_ut_reg_set)
    __swig_getmethods__["cce"] = _csaccess.etm_v3_ccer_ut_cce_get
    if _newclass:
        cce = _swig_property(_csaccess.etm_v3_ccer_ut_cce_get)

    def __init__(self):
        this = _csaccess.new_etm_v3_ccer_ut()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etm_v3_ccer_ut
    __del__ = lambda self: None
etm_v3_ccer_ut_swigregister = _csaccess.etm_v3_ccer_ut_swigregister
etm_v3_ccer_ut_swigregister(etm_v3_ccer_ut)

class etm_v3_ccer_cce(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, etm_v3_ccer_cce, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, etm_v3_ccer_cce, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_ext_in_selectors"] = _csaccess.etm_v3_ccer_cce_n_ext_in_selectors_set
    __swig_getmethods__["n_ext_in_selectors"] = _csaccess.etm_v3_ccer_cce_n_ext_in_selectors_get
    if _newclass:
        n_ext_in_selectors = _swig_property(_csaccess.etm_v3_ccer_cce_n_ext_in_selectors_get, _csaccess.etm_v3_ccer_cce_n_ext_in_selectors_set)
    __swig_setmethods__["ext_in_bus_size"] = _csaccess.etm_v3_ccer_cce_ext_in_bus_size_set
    __swig_getmethods__["ext_in_bus_size"] = _csaccess.etm_v3_ccer_cce_ext_in_bus_size_get
    if _newclass:
        ext_in_bus_size = _swig_property(_csaccess.etm_v3_ccer_cce_ext_in_bus_size_get, _csaccess.etm_v3_ccer_cce_ext_in_bus_size_set)
    __swig_setmethods__["all_reg_readable"] = _csaccess.etm_v3_ccer_cce_all_reg_readable_set
    __swig_getmethods__["all_reg_readable"] = _csaccess.etm_v3_ccer_cce_all_reg_readable_get
    if _newclass:
        all_reg_readable = _swig_property(_csaccess.etm_v3_ccer_cce_all_reg_readable_get, _csaccess.etm_v3_ccer_cce_all_reg_readable_set)
    __swig_setmethods__["data_comp_not_supported"] = _csaccess.etm_v3_ccer_cce_data_comp_not_supported_set
    __swig_getmethods__["data_comp_not_supported"] = _csaccess.etm_v3_ccer_cce_data_comp_not_supported_get
    if _newclass:
        data_comp_not_supported = _swig_property(_csaccess.etm_v3_ccer_cce_data_comp_not_supported_get, _csaccess.etm_v3_ccer_cce_data_comp_not_supported_set)
    __swig_setmethods__["n_inst"] = _csaccess.etm_v3_ccer_cce_n_inst_set
    __swig_getmethods__["n_inst"] = _csaccess.etm_v3_ccer_cce_n_inst_get
    if _newclass:
        n_inst = _swig_property(_csaccess.etm_v3_ccer_cce_n_inst_get, _csaccess.etm_v3_ccer_cce_n_inst_set)
    __swig_setmethods__["n_EICE_wp_inputs"] = _csaccess.etm_v3_ccer_cce_n_EICE_wp_inputs_set
    __swig_getmethods__["n_EICE_wp_inputs"] = _csaccess.etm_v3_ccer_cce_n_EICE_wp_inputs_get
    if _newclass:
        n_EICE_wp_inputs = _swig_property(_csaccess.etm_v3_ccer_cce_n_EICE_wp_inputs_get, _csaccess.etm_v3_ccer_cce_n_EICE_wp_inputs_set)
    __swig_setmethods__["tssb_use_EICE"] = _csaccess.etm_v3_ccer_cce_tssb_use_EICE_set
    __swig_getmethods__["tssb_use_EICE"] = _csaccess.etm_v3_ccer_cce_tssb_use_EICE_get
    if _newclass:
        tssb_use_EICE = _swig_property(_csaccess.etm_v3_ccer_cce_tssb_use_EICE_get, _csaccess.etm_v3_ccer_cce_tssb_use_EICE_set)
    __swig_setmethods__["etmeibcr"] = _csaccess.etm_v3_ccer_cce_etmeibcr_set
    __swig_getmethods__["etmeibcr"] = _csaccess.etm_v3_ccer_cce_etmeibcr_get
    if _newclass:
        etmeibcr = _swig_property(_csaccess.etm_v3_ccer_cce_etmeibcr_get, _csaccess.etm_v3_ccer_cce_etmeibcr_set)
    __swig_setmethods__["timestamping"] = _csaccess.etm_v3_ccer_cce_timestamping_set
    __swig_getmethods__["timestamping"] = _csaccess.etm_v3_ccer_cce_timestamping_get
    if _newclass:
        timestamping = _swig_property(_csaccess.etm_v3_ccer_cce_timestamping_get, _csaccess.etm_v3_ccer_cce_timestamping_set)
    __swig_setmethods__["return_stack"] = _csaccess.etm_v3_ccer_cce_return_stack_set
    __swig_getmethods__["return_stack"] = _csaccess.etm_v3_ccer_cce_return_stack_get
    if _newclass:
        return_stack = _swig_property(_csaccess.etm_v3_ccer_cce_return_stack_get, _csaccess.etm_v3_ccer_cce_return_stack_set)
    __swig_setmethods__["_reserved"] = _csaccess.etm_v3_ccer_cce__reserved_set
    __swig_getmethods__["_reserved"] = _csaccess.etm_v3_ccer_cce__reserved_get
    if _newclass:
        _reserved = _swig_property(_csaccess.etm_v3_ccer_cce__reserved_get, _csaccess.etm_v3_ccer_cce__reserved_set)
    __swig_setmethods__["virt_ext"] = _csaccess.etm_v3_ccer_cce_virt_ext_set
    __swig_getmethods__["virt_ext"] = _csaccess.etm_v3_ccer_cce_virt_ext_get
    if _newclass:
        virt_ext = _swig_property(_csaccess.etm_v3_ccer_cce_virt_ext_get, _csaccess.etm_v3_ccer_cce_virt_ext_set)
    __swig_setmethods__["reduced_counter"] = _csaccess.etm_v3_ccer_cce_reduced_counter_set
    __swig_getmethods__["reduced_counter"] = _csaccess.etm_v3_ccer_cce_reduced_counter_get
    if _newclass:
        reduced_counter = _swig_property(_csaccess.etm_v3_ccer_cce_reduced_counter_get, _csaccess.etm_v3_ccer_cce_reduced_counter_set)
    __swig_setmethods__["timestamp_enc"] = _csaccess.etm_v3_ccer_cce_timestamp_enc_set
    __swig_getmethods__["timestamp_enc"] = _csaccess.etm_v3_ccer_cce_timestamp_enc_get
    if _newclass:
        timestamp_enc = _swig_property(_csaccess.etm_v3_ccer_cce_timestamp_enc_get, _csaccess.etm_v3_ccer_cce_timestamp_enc_set)
    __swig_setmethods__["timestamp_size"] = _csaccess.etm_v3_ccer_cce_timestamp_size_set
    __swig_getmethods__["timestamp_size"] = _csaccess.etm_v3_ccer_cce_timestamp_size_get
    if _newclass:
        timestamp_size = _swig_property(_csaccess.etm_v3_ccer_cce_timestamp_size_get, _csaccess.etm_v3_ccer_cce_timestamp_size_set)

    def __init__(self):
        this = _csaccess.new_etm_v3_ccer_cce()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_etm_v3_ccer_cce
    __del__ = lambda self: None
etm_v3_ccer_cce_swigregister = _csaccess.etm_v3_ccer_cce_swigregister
etm_v3_ccer_cce_swigregister(etm_v3_ccer_cce)

class cs_etm_static_config_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cs_etm_static_config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cs_etm_static_config_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ccr"] = _csaccess.cs_etm_static_config_t_ccr_set
    __swig_getmethods__["ccr"] = _csaccess.cs_etm_static_config_t_ccr_get
    if _newclass:
        ccr = _swig_property(_csaccess.cs_etm_static_config_t_ccr_get, _csaccess.cs_etm_static_config_t_ccr_set)
    __swig_setmethods__["scr"] = _csaccess.cs_etm_static_config_t_scr_set
    __swig_getmethods__["scr"] = _csaccess.cs_etm_static_config_t_scr_get
    if _newclass:
        scr = _swig_property(_csaccess.cs_etm_static_config_t_scr_get, _csaccess.cs_etm_static_config_t_scr_set)
    __swig_setmethods__["ccer"] = _csaccess.cs_etm_static_config_t_ccer_set
    __swig_getmethods__["ccer"] = _csaccess.cs_etm_static_config_t_ccer_get
    if _newclass:
        ccer = _swig_property(_csaccess.cs_etm_static_config_t_ccer_get, _csaccess.cs_etm_static_config_t_ccer_set)
    __swig_setmethods__["version"] = _csaccess.cs_etm_static_config_t_version_set
    __swig_getmethods__["version"] = _csaccess.cs_etm_static_config_t_version_get
    if _newclass:
        version = _swig_property(_csaccess.cs_etm_static_config_t_version_get, _csaccess.cs_etm_static_config_t_version_set)
    __swig_setmethods__["p_cfg_ext"] = _csaccess.cs_etm_static_config_t_p_cfg_ext_set
    __swig_getmethods__["p_cfg_ext"] = _csaccess.cs_etm_static_config_t_p_cfg_ext_get
    if _newclass:
        p_cfg_ext = _swig_property(_csaccess.cs_etm_static_config_t_p_cfg_ext_get, _csaccess.cs_etm_static_config_t_p_cfg_ext_set)

    def __init__(self):
        this = _csaccess.new_cs_etm_static_config_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_cs_etm_static_config_t
    __del__ = lambda self: None
cs_etm_static_config_t_swigregister = _csaccess.cs_etm_static_config_t_swigregister
cs_etm_static_config_t_swigregister(cs_etm_static_config_t)

CS_ETMC_NONE = _csaccess.CS_ETMC_NONE
CS_ETMC_ADDR_COMP = _csaccess.CS_ETMC_ADDR_COMP
CS_ETMC_DATA_COMP = _csaccess.CS_ETMC_DATA_COMP
CS_ETMC_COUNTER = _csaccess.CS_ETMC_COUNTER
CS_ETMC_TRACE_ENABLE = _csaccess.CS_ETMC_TRACE_ENABLE
CS_ETMC_TS_EVENT = _csaccess.CS_ETMC_TS_EVENT
CS_ETMC_TRIGGER_EVENT = _csaccess.CS_ETMC_TRIGGER_EVENT
CS_ETMC_CXID_COMP = _csaccess.CS_ETMC_CXID_COMP
CS_ETMC_CONFIG = _csaccess.CS_ETMC_CONFIG
CS_ETMC_SEQUENCER = _csaccess.CS_ETMC_SEQUENCER
CS_ETMC_EXTOUT = _csaccess.CS_ETMC_EXTOUT
CS_ETMC_VMID_COMP = _csaccess.CS_ETMC_VMID_COMP
CS_ETMC_EVENTSELECT = _csaccess.CS_ETMC_EVENTSELECT
CS_ETMC_RES_SEL = _csaccess.CS_ETMC_RES_SEL
CS_ETMC_SSHOT_CTRL = _csaccess.CS_ETMC_SSHOT_CTRL
CS_ETMC_ALL = _csaccess.CS_ETMC_ALL
CS_ETMVERSION_ETMv3 = _csaccess.CS_ETMVERSION_ETMv3
CS_ETMVERSION_PTM = _csaccess.CS_ETMVERSION_PTM
CS_ETMVERSION_ETMv4 = _csaccess.CS_ETMVERSION_ETMv4
class cs_etm_config_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cs_etm_config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cs_etm_config_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cr"] = _csaccess.cs_etm_config_t_cr_set
    __swig_getmethods__["cr"] = _csaccess.cs_etm_config_t_cr_get
    if _newclass:
        cr = _swig_property(_csaccess.cs_etm_config_t_cr_get, _csaccess.cs_etm_config_t_cr_set)
    __swig_setmethods__["addr_comp"] = _csaccess.cs_etm_config_t_addr_comp_set
    __swig_getmethods__["addr_comp"] = _csaccess.cs_etm_config_t_addr_comp_get
    if _newclass:
        addr_comp = _swig_property(_csaccess.cs_etm_config_t_addr_comp_get, _csaccess.cs_etm_config_t_addr_comp_set)
    __swig_setmethods__["data_comp"] = _csaccess.cs_etm_config_t_data_comp_set
    __swig_getmethods__["data_comp"] = _csaccess.cs_etm_config_t_data_comp_get
    if _newclass:
        data_comp = _swig_property(_csaccess.cs_etm_config_t_data_comp_get, _csaccess.cs_etm_config_t_data_comp_set)
    __swig_setmethods__["counter"] = _csaccess.cs_etm_config_t_counter_set
    __swig_getmethods__["counter"] = _csaccess.cs_etm_config_t_counter_get
    if _newclass:
        counter = _swig_property(_csaccess.cs_etm_config_t_counter_get, _csaccess.cs_etm_config_t_counter_set)
    __swig_setmethods__["cxid_comp"] = _csaccess.cs_etm_config_t_cxid_comp_set
    __swig_getmethods__["cxid_comp"] = _csaccess.cs_etm_config_t_cxid_comp_get
    if _newclass:
        cxid_comp = _swig_property(_csaccess.cs_etm_config_t_cxid_comp_get, _csaccess.cs_etm_config_t_cxid_comp_set)
    __swig_setmethods__["sequencer"] = _csaccess.cs_etm_config_t_sequencer_set
    __swig_getmethods__["sequencer"] = _csaccess.cs_etm_config_t_sequencer_get
    if _newclass:
        sequencer = _swig_property(_csaccess.cs_etm_config_t_sequencer_get, _csaccess.cs_etm_config_t_sequencer_set)
    __swig_setmethods__["flags"] = _csaccess.cs_etm_config_t_flags_set
    __swig_getmethods__["flags"] = _csaccess.cs_etm_config_t_flags_get
    if _newclass:
        flags = _swig_property(_csaccess.cs_etm_config_t_flags_get, _csaccess.cs_etm_config_t_flags_set)
    __swig_setmethods__["idr"] = _csaccess.cs_etm_config_t_idr_set
    __swig_getmethods__["idr"] = _csaccess.cs_etm_config_t_idr_get
    if _newclass:
        idr = _swig_property(_csaccess.cs_etm_config_t_idr_get, _csaccess.cs_etm_config_t_idr_set)
    __swig_setmethods__["sc"] = _csaccess.cs_etm_config_t_sc_set
    __swig_getmethods__["sc"] = _csaccess.cs_etm_config_t_sc_get
    if _newclass:
        sc = _swig_property(_csaccess.cs_etm_config_t_sc_get, _csaccess.cs_etm_config_t_sc_set)
    __swig_setmethods__["timestamp_event"] = _csaccess.cs_etm_config_t_timestamp_event_set
    __swig_getmethods__["timestamp_event"] = _csaccess.cs_etm_config_t_timestamp_event_get
    if _newclass:
        timestamp_event = _swig_property(_csaccess.cs_etm_config_t_timestamp_event_get, _csaccess.cs_etm_config_t_timestamp_event_set)
    __swig_setmethods__["trace_enable_event"] = _csaccess.cs_etm_config_t_trace_enable_event_set
    __swig_getmethods__["trace_enable_event"] = _csaccess.cs_etm_config_t_trace_enable_event_get
    if _newclass:
        trace_enable_event = _swig_property(_csaccess.cs_etm_config_t_trace_enable_event_get, _csaccess.cs_etm_config_t_trace_enable_event_set)
    __swig_setmethods__["trace_start_comparators"] = _csaccess.cs_etm_config_t_trace_start_comparators_set
    __swig_getmethods__["trace_start_comparators"] = _csaccess.cs_etm_config_t_trace_start_comparators_get
    if _newclass:
        trace_start_comparators = _swig_property(_csaccess.cs_etm_config_t_trace_start_comparators_get, _csaccess.cs_etm_config_t_trace_start_comparators_set)
    __swig_setmethods__["trace_stop_comparators"] = _csaccess.cs_etm_config_t_trace_stop_comparators_set
    __swig_getmethods__["trace_stop_comparators"] = _csaccess.cs_etm_config_t_trace_stop_comparators_get
    if _newclass:
        trace_stop_comparators = _swig_property(_csaccess.cs_etm_config_t_trace_stop_comparators_get, _csaccess.cs_etm_config_t_trace_stop_comparators_set)
    __swig_setmethods__["trace_enable_cr1"] = _csaccess.cs_etm_config_t_trace_enable_cr1_set
    __swig_getmethods__["trace_enable_cr1"] = _csaccess.cs_etm_config_t_trace_enable_cr1_get
    if _newclass:
        trace_enable_cr1 = _swig_property(_csaccess.cs_etm_config_t_trace_enable_cr1_get, _csaccess.cs_etm_config_t_trace_enable_cr1_set)
    __swig_setmethods__["trace_enable_cr2"] = _csaccess.cs_etm_config_t_trace_enable_cr2_set
    __swig_getmethods__["trace_enable_cr2"] = _csaccess.cs_etm_config_t_trace_enable_cr2_get
    if _newclass:
        trace_enable_cr2 = _swig_property(_csaccess.cs_etm_config_t_trace_enable_cr2_get, _csaccess.cs_etm_config_t_trace_enable_cr2_set)
    __swig_setmethods__["vdata_event"] = _csaccess.cs_etm_config_t_vdata_event_set
    __swig_getmethods__["vdata_event"] = _csaccess.cs_etm_config_t_vdata_event_get
    if _newclass:
        vdata_event = _swig_property(_csaccess.cs_etm_config_t_vdata_event_get, _csaccess.cs_etm_config_t_vdata_event_set)
    __swig_setmethods__["vdata_ctl1"] = _csaccess.cs_etm_config_t_vdata_ctl1_set
    __swig_getmethods__["vdata_ctl1"] = _csaccess.cs_etm_config_t_vdata_ctl1_get
    if _newclass:
        vdata_ctl1 = _swig_property(_csaccess.cs_etm_config_t_vdata_ctl1_get, _csaccess.cs_etm_config_t_vdata_ctl1_set)
    __swig_setmethods__["vdata_ctl2"] = _csaccess.cs_etm_config_t_vdata_ctl2_set
    __swig_getmethods__["vdata_ctl2"] = _csaccess.cs_etm_config_t_vdata_ctl2_get
    if _newclass:
        vdata_ctl2 = _swig_property(_csaccess.cs_etm_config_t_vdata_ctl2_get, _csaccess.cs_etm_config_t_vdata_ctl2_set)
    __swig_setmethods__["vdata_ctl3"] = _csaccess.cs_etm_config_t_vdata_ctl3_set
    __swig_getmethods__["vdata_ctl3"] = _csaccess.cs_etm_config_t_vdata_ctl3_get
    if _newclass:
        vdata_ctl3 = _swig_property(_csaccess.cs_etm_config_t_vdata_ctl3_get, _csaccess.cs_etm_config_t_vdata_ctl3_set)
    __swig_setmethods__["trigger_event"] = _csaccess.cs_etm_config_t_trigger_event_set
    __swig_getmethods__["trigger_event"] = _csaccess.cs_etm_config_t_trigger_event_get
    if _newclass:
        trigger_event = _swig_property(_csaccess.cs_etm_config_t_trigger_event_get, _csaccess.cs_etm_config_t_trigger_event_set)
    __swig_setmethods__["addr_comp_mask"] = _csaccess.cs_etm_config_t_addr_comp_mask_set
    __swig_getmethods__["addr_comp_mask"] = _csaccess.cs_etm_config_t_addr_comp_mask_get
    if _newclass:
        addr_comp_mask = _swig_property(_csaccess.cs_etm_config_t_addr_comp_mask_get, _csaccess.cs_etm_config_t_addr_comp_mask_set)
    __swig_setmethods__["data_comp_mask"] = _csaccess.cs_etm_config_t_data_comp_mask_set
    __swig_getmethods__["data_comp_mask"] = _csaccess.cs_etm_config_t_data_comp_mask_get
    if _newclass:
        data_comp_mask = _swig_property(_csaccess.cs_etm_config_t_data_comp_mask_get, _csaccess.cs_etm_config_t_data_comp_mask_set)
    __swig_setmethods__["counter_mask"] = _csaccess.cs_etm_config_t_counter_mask_set
    __swig_getmethods__["counter_mask"] = _csaccess.cs_etm_config_t_counter_mask_get
    if _newclass:
        counter_mask = _swig_property(_csaccess.cs_etm_config_t_counter_mask_get, _csaccess.cs_etm_config_t_counter_mask_set)
    __swig_setmethods__["cxid_mask"] = _csaccess.cs_etm_config_t_cxid_mask_set
    __swig_getmethods__["cxid_mask"] = _csaccess.cs_etm_config_t_cxid_mask_get
    if _newclass:
        cxid_mask = _swig_property(_csaccess.cs_etm_config_t_cxid_mask_get, _csaccess.cs_etm_config_t_cxid_mask_set)
    __swig_setmethods__["cxid_comp_mask"] = _csaccess.cs_etm_config_t_cxid_comp_mask_set
    __swig_getmethods__["cxid_comp_mask"] = _csaccess.cs_etm_config_t_cxid_comp_mask_get
    if _newclass:
        cxid_comp_mask = _swig_property(_csaccess.cs_etm_config_t_cxid_comp_mask_get, _csaccess.cs_etm_config_t_cxid_comp_mask_set)
    __swig_setmethods__["extout_event"] = _csaccess.cs_etm_config_t_extout_event_set
    __swig_getmethods__["extout_event"] = _csaccess.cs_etm_config_t_extout_event_get
    if _newclass:
        extout_event = _swig_property(_csaccess.cs_etm_config_t_extout_event_get, _csaccess.cs_etm_config_t_extout_event_set)
    __swig_setmethods__["extout_mask"] = _csaccess.cs_etm_config_t_extout_mask_set
    __swig_getmethods__["extout_mask"] = _csaccess.cs_etm_config_t_extout_mask_get
    if _newclass:
        extout_mask = _swig_property(_csaccess.cs_etm_config_t_extout_mask_get, _csaccess.cs_etm_config_t_extout_mask_set)

    def __init__(self):
        this = _csaccess.new_cs_etm_config_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_cs_etm_config_t
    __del__ = lambda self: None
cs_etm_config_t_swigregister = _csaccess.cs_etm_config_t_swigregister
cs_etm_config_t_swigregister(cs_etm_config_t)
CS_ETMC_MAX_ADDR_COMP = _csaccess.CS_ETMC_MAX_ADDR_COMP
CS_ETMC_MAX_DATA_COMP = _csaccess.CS_ETMC_MAX_DATA_COMP
CS_ETMC_MAX_COUNTER = _csaccess.CS_ETMC_MAX_COUNTER
CS_ETMC_MAX_CXID_COMP = _csaccess.CS_ETMC_MAX_CXID_COMP
CS_ETMC_MAX_EXTOUT = _csaccess.CS_ETMC_MAX_EXTOUT

class _cr_bits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cr_bits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cr_bits, name)
    __repr__ = _swig_repr
    __swig_setmethods__["etm_power_down"] = _csaccess._cr_bits_etm_power_down_set
    __swig_getmethods__["etm_power_down"] = _csaccess._cr_bits_etm_power_down_get
    if _newclass:
        etm_power_down = _swig_property(_csaccess._cr_bits_etm_power_down_get, _csaccess._cr_bits_etm_power_down_set)
    __swig_setmethods__["monitor_cprt"] = _csaccess._cr_bits_monitor_cprt_set
    __swig_getmethods__["monitor_cprt"] = _csaccess._cr_bits_monitor_cprt_get
    if _newclass:
        monitor_cprt = _swig_property(_csaccess._cr_bits_monitor_cprt_get, _csaccess._cr_bits_monitor_cprt_set)
    __swig_setmethods__["data_access"] = _csaccess._cr_bits_data_access_set
    __swig_getmethods__["data_access"] = _csaccess._cr_bits_data_access_get
    if _newclass:
        data_access = _swig_property(_csaccess._cr_bits_data_access_get, _csaccess._cr_bits_data_access_set)
    __swig_setmethods__["_port_size_20"] = _csaccess._cr_bits__port_size_20_set
    __swig_getmethods__["_port_size_20"] = _csaccess._cr_bits__port_size_20_get
    if _newclass:
        _port_size_20 = _swig_property(_csaccess._cr_bits__port_size_20_get, _csaccess._cr_bits__port_size_20_set)
    __swig_setmethods__["stall_processor"] = _csaccess._cr_bits_stall_processor_set
    __swig_getmethods__["stall_processor"] = _csaccess._cr_bits_stall_processor_get
    if _newclass:
        stall_processor = _swig_property(_csaccess._cr_bits_stall_processor_get, _csaccess._cr_bits_stall_processor_set)
    __swig_setmethods__["branch_output"] = _csaccess._cr_bits_branch_output_set
    __swig_getmethods__["branch_output"] = _csaccess._cr_bits_branch_output_get
    if _newclass:
        branch_output = _swig_property(_csaccess._cr_bits_branch_output_get, _csaccess._cr_bits_branch_output_set)
    __swig_setmethods__["debug_req_ctrl"] = _csaccess._cr_bits_debug_req_ctrl_set
    __swig_getmethods__["debug_req_ctrl"] = _csaccess._cr_bits_debug_req_ctrl_get
    if _newclass:
        debug_req_ctrl = _swig_property(_csaccess._cr_bits_debug_req_ctrl_get, _csaccess._cr_bits_debug_req_ctrl_set)
    __swig_setmethods__["prog_mode"] = _csaccess._cr_bits_prog_mode_set
    __swig_getmethods__["prog_mode"] = _csaccess._cr_bits_prog_mode_get
    if _newclass:
        prog_mode = _swig_property(_csaccess._cr_bits_prog_mode_get, _csaccess._cr_bits_prog_mode_set)
    __swig_setmethods__["etm_en"] = _csaccess._cr_bits_etm_en_set
    __swig_getmethods__["etm_en"] = _csaccess._cr_bits_etm_en_get
    if _newclass:
        etm_en = _swig_property(_csaccess._cr_bits_etm_en_get, _csaccess._cr_bits_etm_en_set)
    __swig_setmethods__["cycle_accurate"] = _csaccess._cr_bits_cycle_accurate_set
    __swig_getmethods__["cycle_accurate"] = _csaccess._cr_bits_cycle_accurate_get
    if _newclass:
        cycle_accurate = _swig_property(_csaccess._cr_bits_cycle_accurate_get, _csaccess._cr_bits_cycle_accurate_set)
    __swig_setmethods__["_port_mode_2"] = _csaccess._cr_bits__port_mode_2_set
    __swig_getmethods__["_port_mode_2"] = _csaccess._cr_bits__port_mode_2_get
    if _newclass:
        _port_mode_2 = _swig_property(_csaccess._cr_bits__port_mode_2_get, _csaccess._cr_bits__port_mode_2_set)
    __swig_setmethods__["cxid_size"] = _csaccess._cr_bits_cxid_size_set
    __swig_getmethods__["cxid_size"] = _csaccess._cr_bits_cxid_size_get
    if _newclass:
        cxid_size = _swig_property(_csaccess._cr_bits_cxid_size_get, _csaccess._cr_bits_cxid_size_set)
    __swig_setmethods__["_port_mode_10"] = _csaccess._cr_bits__port_mode_10_set
    __swig_getmethods__["_port_mode_10"] = _csaccess._cr_bits__port_mode_10_get
    if _newclass:
        _port_mode_10 = _swig_property(_csaccess._cr_bits__port_mode_10_get, _csaccess._cr_bits__port_mode_10_set)
    __swig_setmethods__["suppress_data"] = _csaccess._cr_bits_suppress_data_set
    __swig_getmethods__["suppress_data"] = _csaccess._cr_bits_suppress_data_get
    if _newclass:
        suppress_data = _swig_property(_csaccess._cr_bits_suppress_data_get, _csaccess._cr_bits_suppress_data_set)
    __swig_setmethods__["filter_cprt"] = _csaccess._cr_bits_filter_cprt_set
    __swig_getmethods__["filter_cprt"] = _csaccess._cr_bits_filter_cprt_get
    if _newclass:
        filter_cprt = _swig_property(_csaccess._cr_bits_filter_cprt_get, _csaccess._cr_bits_filter_cprt_set)
    __swig_setmethods__["data_only_mode"] = _csaccess._cr_bits_data_only_mode_set
    __swig_getmethods__["data_only_mode"] = _csaccess._cr_bits_data_only_mode_get
    if _newclass:
        data_only_mode = _swig_property(_csaccess._cr_bits_data_only_mode_get, _csaccess._cr_bits_data_only_mode_set)
    __swig_setmethods__["_port_size_3"] = _csaccess._cr_bits__port_size_3_set
    __swig_getmethods__["_port_size_3"] = _csaccess._cr_bits__port_size_3_get
    if _newclass:
        _port_size_3 = _swig_property(_csaccess._cr_bits__port_size_3_get, _csaccess._cr_bits__port_size_3_set)
    __swig_setmethods__["disable_dbg_writes"] = _csaccess._cr_bits_disable_dbg_writes_set
    __swig_getmethods__["disable_dbg_writes"] = _csaccess._cr_bits_disable_dbg_writes_get
    if _newclass:
        disable_dbg_writes = _swig_property(_csaccess._cr_bits_disable_dbg_writes_get, _csaccess._cr_bits_disable_dbg_writes_set)
    __swig_setmethods__["disable_sw_writes"] = _csaccess._cr_bits_disable_sw_writes_set
    __swig_getmethods__["disable_sw_writes"] = _csaccess._cr_bits_disable_sw_writes_get
    if _newclass:
        disable_sw_writes = _swig_property(_csaccess._cr_bits_disable_sw_writes_get, _csaccess._cr_bits_disable_sw_writes_set)
    __swig_setmethods__["instr_res_ac"] = _csaccess._cr_bits_instr_res_ac_set
    __swig_getmethods__["instr_res_ac"] = _csaccess._cr_bits_instr_res_ac_get
    if _newclass:
        instr_res_ac = _swig_property(_csaccess._cr_bits_instr_res_ac_get, _csaccess._cr_bits_instr_res_ac_set)
    __swig_setmethods__["proc_select"] = _csaccess._cr_bits_proc_select_set
    __swig_getmethods__["proc_select"] = _csaccess._cr_bits_proc_select_get
    if _newclass:
        proc_select = _swig_property(_csaccess._cr_bits_proc_select_get, _csaccess._cr_bits_proc_select_set)
    __swig_setmethods__["timestamp_enabled"] = _csaccess._cr_bits_timestamp_enabled_set
    __swig_getmethods__["timestamp_enabled"] = _csaccess._cr_bits_timestamp_enabled_get
    if _newclass:
        timestamp_enabled = _swig_property(_csaccess._cr_bits_timestamp_enabled_get, _csaccess._cr_bits_timestamp_enabled_set)
    __swig_setmethods__["ret_stack"] = _csaccess._cr_bits_ret_stack_set
    __swig_getmethods__["ret_stack"] = _csaccess._cr_bits_ret_stack_get
    if _newclass:
        ret_stack = _swig_property(_csaccess._cr_bits_ret_stack_get, _csaccess._cr_bits_ret_stack_set)
    __swig_setmethods__["vmid_trace"] = _csaccess._cr_bits_vmid_trace_set
    __swig_getmethods__["vmid_trace"] = _csaccess._cr_bits_vmid_trace_get
    if _newclass:
        vmid_trace = _swig_property(_csaccess._cr_bits_vmid_trace_get, _csaccess._cr_bits_vmid_trace_set)

    def __init__(self):
        this = _csaccess.new__cr_bits()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__cr_bits
    __del__ = lambda self: None
_cr_bits_swigregister = _csaccess._cr_bits_swigregister
_cr_bits_swigregister(_cr_bits)

class _u_cr_reg_bits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _u_cr_reg_bits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _u_cr_reg_bits, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _csaccess._u_cr_reg_bits_c_set
    __swig_getmethods__["c"] = _csaccess._u_cr_reg_bits_c_get
    if _newclass:
        c = _swig_property(_csaccess._u_cr_reg_bits_c_get, _csaccess._u_cr_reg_bits_c_set)
    __swig_setmethods__["reg"] = _csaccess._u_cr_reg_bits_reg_set
    __swig_getmethods__["reg"] = _csaccess._u_cr_reg_bits_reg_get
    if _newclass:
        reg = _swig_property(_csaccess._u_cr_reg_bits_reg_get, _csaccess._u_cr_reg_bits_reg_set)

    def __init__(self):
        this = _csaccess.new__u_cr_reg_bits()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__u_cr_reg_bits
    __del__ = lambda self: None
_u_cr_reg_bits_swigregister = _csaccess._u_cr_reg_bits_swigregister
_u_cr_reg_bits_swigregister(_u_cr_reg_bits)

class _cr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["raw"] = _csaccess._cr_raw_set
    __swig_getmethods__["raw"] = _csaccess._cr_raw_get
    if _newclass:
        raw = _swig_property(_csaccess._cr_raw_get, _csaccess._cr_raw_set)
    __swig_setmethods__["port_size"] = _csaccess._cr_port_size_set
    __swig_getmethods__["port_size"] = _csaccess._cr_port_size_get
    if _newclass:
        port_size = _swig_property(_csaccess._cr_port_size_get, _csaccess._cr_port_size_set)
    __swig_setmethods__["port_mode"] = _csaccess._cr_port_mode_set
    __swig_getmethods__["port_mode"] = _csaccess._cr_port_mode_get
    if _newclass:
        port_mode = _swig_property(_csaccess._cr_port_mode_get, _csaccess._cr_port_mode_set)

    def __init__(self):
        this = _csaccess.new__cr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__cr
    __del__ = lambda self: None
_cr_swigregister = _csaccess._cr_swigregister
_cr_swigregister(_cr)

class _acompregs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _acompregs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _acompregs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["address"] = _csaccess._acompregs_address_set
    __swig_getmethods__["address"] = _csaccess._acompregs_address_get
    if _newclass:
        address = _swig_property(_csaccess._acompregs_address_get, _csaccess._acompregs_address_set)
    __swig_setmethods__["access_type"] = _csaccess._acompregs_access_type_set
    __swig_getmethods__["access_type"] = _csaccess._acompregs_access_type_get
    if _newclass:
        access_type = _swig_property(_csaccess._acompregs_access_type_get, _csaccess._acompregs_access_type_set)

    def __init__(self):
        this = _csaccess.new__acompregs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__acompregs
    __del__ = lambda self: None
_acompregs_swigregister = _csaccess._acompregs_swigregister
_acompregs_swigregister(_acompregs)

class _dcompregs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _dcompregs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _dcompregs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _csaccess._dcompregs_value_set
    __swig_getmethods__["value"] = _csaccess._dcompregs_value_get
    if _newclass:
        value = _swig_property(_csaccess._dcompregs_value_get, _csaccess._dcompregs_value_set)
    __swig_setmethods__["data_mask"] = _csaccess._dcompregs_data_mask_set
    __swig_getmethods__["data_mask"] = _csaccess._dcompregs_data_mask_get
    if _newclass:
        data_mask = _swig_property(_csaccess._dcompregs_data_mask_get, _csaccess._dcompregs_data_mask_set)

    def __init__(self):
        this = _csaccess.new__dcompregs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__dcompregs
    __del__ = lambda self: None
_dcompregs_swigregister = _csaccess._dcompregs_swigregister
_dcompregs_swigregister(_dcompregs)

class _cntrregs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _cntrregs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _cntrregs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reload_value"] = _csaccess._cntrregs_reload_value_set
    __swig_getmethods__["reload_value"] = _csaccess._cntrregs_reload_value_get
    if _newclass:
        reload_value = _swig_property(_csaccess._cntrregs_reload_value_get, _csaccess._cntrregs_reload_value_set)
    __swig_setmethods__["enable_event"] = _csaccess._cntrregs_enable_event_set
    __swig_getmethods__["enable_event"] = _csaccess._cntrregs_enable_event_get
    if _newclass:
        enable_event = _swig_property(_csaccess._cntrregs_enable_event_get, _csaccess._cntrregs_enable_event_set)
    __swig_setmethods__["reload_event"] = _csaccess._cntrregs_reload_event_set
    __swig_getmethods__["reload_event"] = _csaccess._cntrregs_reload_event_get
    if _newclass:
        reload_event = _swig_property(_csaccess._cntrregs_reload_event_get, _csaccess._cntrregs_reload_event_set)
    __swig_setmethods__["value"] = _csaccess._cntrregs_value_set
    __swig_getmethods__["value"] = _csaccess._cntrregs_value_get
    if _newclass:
        value = _swig_property(_csaccess._cntrregs_value_get, _csaccess._cntrregs_value_set)

    def __init__(self):
        this = _csaccess.new__cntrregs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__cntrregs
    __del__ = lambda self: None
_cntrregs_swigregister = _csaccess._cntrregs_swigregister
_cntrregs_swigregister(_cntrregs)

class _ctxtidregs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _ctxtidregs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _ctxtidregs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cxid"] = _csaccess._ctxtidregs_cxid_set
    __swig_getmethods__["cxid"] = _csaccess._ctxtidregs_cxid_get
    if _newclass:
        cxid = _swig_property(_csaccess._ctxtidregs_cxid_get, _csaccess._ctxtidregs_cxid_set)

    def __init__(self):
        this = _csaccess.new__ctxtidregs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__ctxtidregs
    __del__ = lambda self: None
_ctxtidregs_swigregister = _csaccess._ctxtidregs_swigregister
_ctxtidregs_swigregister(_ctxtidregs)

class _seqregs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _seqregs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _seqregs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _csaccess._seqregs_state_set
    __swig_getmethods__["state"] = _csaccess._seqregs_state_get
    if _newclass:
        state = _swig_property(_csaccess._seqregs_state_get, _csaccess._seqregs_state_set)
    __swig_setmethods__["transition_event"] = _csaccess._seqregs_transition_event_set
    __swig_getmethods__["transition_event"] = _csaccess._seqregs_transition_event_get
    if _newclass:
        transition_event = _swig_property(_csaccess._seqregs_transition_event_get, _csaccess._seqregs_transition_event_set)

    def __init__(self):
        this = _csaccess.new__seqregs()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete__seqregs
    __del__ = lambda self: None
_seqregs_swigregister = _csaccess._seqregs_swigregister
_seqregs_swigregister(_seqregs)


def cs_etm_config_init(etm_config):
    return _csaccess.cs_etm_config_init(etm_config)
cs_etm_config_init = _csaccess.cs_etm_config_init

def cs_etm_config_get(dev, etm_config):
    return _csaccess.cs_etm_config_get(dev, etm_config)
cs_etm_config_get = _csaccess.cs_etm_config_get

def cs_etm_config_put(dev, etm_config):
    return _csaccess.cs_etm_config_put(dev, etm_config)
cs_etm_config_put = _csaccess.cs_etm_config_put

def cs_etm_config_print(arg1):
    return _csaccess.cs_etm_config_print(arg1)
cs_etm_config_print = _csaccess.cs_etm_config_print

def cs_etm_config_init_ex(dev, etm_config):
    return _csaccess.cs_etm_config_init_ex(dev, etm_config)
cs_etm_config_init_ex = _csaccess.cs_etm_config_init_ex

def cs_etm_config_get_ex(dev, etm_config):
    return _csaccess.cs_etm_config_get_ex(dev, etm_config)
cs_etm_config_get_ex = _csaccess.cs_etm_config_get_ex

def cs_etm_config_put_ex(dev, etm_config):
    return _csaccess.cs_etm_config_put_ex(dev, etm_config)
cs_etm_config_put_ex = _csaccess.cs_etm_config_put_ex

def cs_etm_config_print_ex(dev, etm_config):
    return _csaccess.cs_etm_config_print_ex(dev, etm_config)
cs_etm_config_print_ex = _csaccess.cs_etm_config_print_ex

def cs_etm_clean(dev):
    return _csaccess.cs_etm_clean(dev)
cs_etm_clean = _csaccess.cs_etm_clean

def cs_etm_enable_programming(dev):
    return _csaccess.cs_etm_enable_programming(dev)
cs_etm_enable_programming = _csaccess.cs_etm_enable_programming

def cs_etm_disable_programming(dev):
    return _csaccess.cs_etm_disable_programming(dev)
cs_etm_disable_programming = _csaccess.cs_etm_disable_programming

def cs_etm_get_version(dev):
    return _csaccess.cs_etm_get_version(dev)
cs_etm_get_version = _csaccess.cs_etm_get_version

def cs_etm_static_config_init(arg1):
    return _csaccess.cs_etm_static_config_init(arg1)
cs_etm_static_config_init = _csaccess.cs_etm_static_config_init

def cs_pmu_n_counters(arg1):
    return _csaccess.cs_pmu_n_counters(arg1)
cs_pmu_n_counters = _csaccess.cs_pmu_n_counters

def cs_pmu_get_counts(arg1, mask, cycles, counts, overflow):
    return _csaccess.cs_pmu_get_counts(arg1, mask, cycles, counts, overflow)
cs_pmu_get_counts = _csaccess.cs_pmu_get_counts
class cs_pmu_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cs_pmu_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cs_pmu_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _csaccess.cs_pmu_t_version_set
    __swig_getmethods__["version"] = _csaccess.cs_pmu_t_version_get
    if _newclass:
        version = _swig_property(_csaccess.cs_pmu_t_version_get, _csaccess.cs_pmu_t_version_set)
    __swig_setmethods__["div64"] = _csaccess.cs_pmu_t_div64_set
    __swig_getmethods__["div64"] = _csaccess.cs_pmu_t_div64_get
    if _newclass:
        div64 = _swig_property(_csaccess.cs_pmu_t_div64_get, _csaccess.cs_pmu_t_div64_set)
    __swig_setmethods__["cycles"] = _csaccess.cs_pmu_t_cycles_set
    __swig_getmethods__["cycles"] = _csaccess.cs_pmu_t_cycles_get
    if _newclass:
        cycles = _swig_property(_csaccess.cs_pmu_t_cycles_get, _csaccess.cs_pmu_t_cycles_set)
    __swig_setmethods__["overflow"] = _csaccess.cs_pmu_t_overflow_set
    __swig_getmethods__["overflow"] = _csaccess.cs_pmu_t_overflow_get
    if _newclass:
        overflow = _swig_property(_csaccess.cs_pmu_t_overflow_get, _csaccess.cs_pmu_t_overflow_set)
    __swig_setmethods__["mask"] = _csaccess.cs_pmu_t_mask_set
    __swig_getmethods__["mask"] = _csaccess.cs_pmu_t_mask_get
    if _newclass:
        mask = _swig_property(_csaccess.cs_pmu_t_mask_get, _csaccess.cs_pmu_t_mask_set)
    __swig_setmethods__["counts"] = _csaccess.cs_pmu_t_counts_set
    __swig_getmethods__["counts"] = _csaccess.cs_pmu_t_counts_get
    if _newclass:
        counts = _swig_property(_csaccess.cs_pmu_t_counts_get, _csaccess.cs_pmu_t_counts_set)
    __swig_setmethods__["eventtypes"] = _csaccess.cs_pmu_t_eventtypes_set
    __swig_getmethods__["eventtypes"] = _csaccess.cs_pmu_t_eventtypes_get
    if _newclass:
        eventtypes = _swig_property(_csaccess.cs_pmu_t_eventtypes_get, _csaccess.cs_pmu_t_eventtypes_set)

    def __init__(self):
        this = _csaccess.new_cs_pmu_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csaccess.delete_cs_pmu_t
    __del__ = lambda self: None
cs_pmu_t_swigregister = _csaccess.cs_pmu_t_swigregister
cs_pmu_t_swigregister(cs_pmu_t)

CS_PMU_VERSION_1 = _csaccess.CS_PMU_VERSION_1
CS_PMU_CYCLES = _csaccess.CS_PMU_CYCLES
CS_PMU_OVERFLOW = _csaccess.CS_PMU_OVERFLOW
CS_PMU_COUNTS = _csaccess.CS_PMU_COUNTS
CS_PMU_EVENTTYPES = _csaccess.CS_PMU_EVENTTYPES
CS_PMU_DIV64 = _csaccess.CS_PMU_DIV64
CS_PMU_ENABLE = _csaccess.CS_PMU_ENABLE
CS_PMU_DISABLE = _csaccess.CS_PMU_DISABLE

def cs_pmu_read_status(arg1, flags, status):
    return _csaccess.cs_pmu_read_status(arg1, flags, status)
cs_pmu_read_status = _csaccess.cs_pmu_read_status

def cs_pmu_write_status(arg1, flags, status):
    return _csaccess.cs_pmu_write_status(arg1, flags, status)
cs_pmu_write_status = _csaccess.cs_pmu_write_status

def cs_pmu_bus_export(arg1, enable):
    return _csaccess.cs_pmu_bus_export(arg1, enable)
cs_pmu_bus_export = _csaccess.cs_pmu_bus_export

def cs_pmu_reset(arg1, flags):
    return _csaccess.cs_pmu_reset(arg1, flags)
cs_pmu_reset = _csaccess.cs_pmu_reset

def cs_pmu_is_enabled(arg1):
    return _csaccess.cs_pmu_is_enabled(arg1)
cs_pmu_is_enabled = _csaccess.cs_pmu_is_enabled

def cs_device_address(dev):
    return _csaccess.cs_device_address(dev)
cs_device_address = _csaccess.cs_device_address

def cs_device_part_number(dev):
    return _csaccess.cs_device_part_number(dev)
cs_device_part_number = _csaccess.cs_device_part_number

def cs_device_read(dev, offset):
    return _csaccess.cs_device_read(dev, offset)
cs_device_read = _csaccess.cs_device_read

def cs_device_write(dev, offset, data):
    return _csaccess.cs_device_write(dev, offset, data)
cs_device_write = _csaccess.cs_device_write

def cs_device_write_only(dev, offset, data):
    return _csaccess.cs_device_write_only(dev, offset, data)
cs_device_write_only = _csaccess.cs_device_write_only

def cs_device_write_masked(dev, offset, data, bitmask):
    return _csaccess.cs_device_write_masked(dev, offset, data, bitmask)
cs_device_write_masked = _csaccess.cs_device_write_masked

def cs_device_set(dev, offset, bits):
    return _csaccess.cs_device_set(dev, offset, bits)
cs_device_set = _csaccess.cs_device_set

def cs_device_clear(dev, offset, bits):
    return _csaccess.cs_device_clear(dev, offset, bits)
cs_device_clear = _csaccess.cs_device_clear

def cs_device_wait(dev, offset, bit_mask, operation, pattern, p_last_val):
    return _csaccess.cs_device_wait(dev, offset, bit_mask, operation, pattern, p_last_val)
cs_device_wait = _csaccess.cs_device_wait

def cs_device_set_wait_repeats(n_wait_repeat_count):
    return _csaccess.cs_device_set_wait_repeats(n_wait_repeat_count)
cs_device_set_wait_repeats = _csaccess.cs_device_set_wait_repeats

def cs_trace_swstim_get_port_count(dev):
    return _csaccess.cs_trace_swstim_get_port_count(dev)
cs_trace_swstim_get_port_count = _csaccess.cs_trace_swstim_get_port_count

def cs_trace_stimulus(dev, port, value):
    return _csaccess.cs_trace_stimulus(dev, port, value)
cs_trace_stimulus = _csaccess.cs_trace_stimulus

def cs_trace_swstim_enable_trigger(dev, mask, value):
    return _csaccess.cs_trace_swstim_enable_trigger(dev, mask, value)
cs_trace_swstim_enable_trigger = _csaccess.cs_trace_swstim_enable_trigger

def cs_trace_swstim_enable_all_ports(dev):
    return _csaccess.cs_trace_swstim_enable_all_ports(dev)
cs_trace_swstim_enable_all_ports = _csaccess.cs_trace_swstim_enable_all_ports

def cs_trace_swstim_set_sync_repeat(dev, value):
    return _csaccess.cs_trace_swstim_set_sync_repeat(dev, value)
cs_trace_swstim_set_sync_repeat = _csaccess.cs_trace_swstim_set_sync_repeat

def cs_stm_config_master(dev, master, port_0_addr):
    return _csaccess.cs_stm_config_master(dev, master, port_0_addr)
cs_stm_config_master = _csaccess.cs_stm_config_master

def cs_stm_select_master(dev, master):
    return _csaccess.cs_stm_select_master(dev, master)
cs_stm_select_master = _csaccess.cs_stm_select_master

def cs_stm_ext_write(dev, port, value, length, trans_type):
    return _csaccess.cs_stm_ext_write(dev, port, value, length, trans_type)
cs_stm_ext_write = _csaccess.cs_stm_ext_write

def cs_stm_config_get(dev, dyn_config):
    return _csaccess.cs_stm_config_get(dev, dyn_config)
cs_stm_config_get = _csaccess.cs_stm_config_get

def cs_stm_config_put(dev, dyn_config):
    return _csaccess.cs_stm_config_put(dev, dyn_config)
cs_stm_config_put = _csaccess.cs_stm_config_put

def cs_register_romtable(addr):
    return _csaccess.cs_register_romtable(addr)
cs_register_romtable = _csaccess.cs_register_romtable

def cs_device_register(addr):
    return _csaccess.cs_device_register(addr)
cs_device_register = _csaccess.cs_device_register

def cs_exclude_range(arg1, to):
    return _csaccess.cs_exclude_range(arg1, to)
cs_exclude_range = _csaccess.cs_exclude_range

def cs_device_set_affinity(dev, cpu):
    return _csaccess.cs_device_set_affinity(dev, cpu)
cs_device_set_affinity = _csaccess.cs_device_set_affinity

def cs_device_set_power_domain(dev, power_domain):
    return _csaccess.cs_device_set_power_domain(dev, power_domain)
cs_device_set_power_domain = _csaccess.cs_device_set_power_domain

def cs_atb_register(arg1, from_port, to, to_port):
    return _csaccess.cs_atb_register(arg1, from_port, to, to_port)
cs_atb_register = _csaccess.cs_atb_register

def cs_atid_is_valid(id):
    return _csaccess.cs_atid_is_valid(id)
cs_atid_is_valid = _csaccess.cs_atid_is_valid

def cs_atb_add_replicator(n_out_ports):
    return _csaccess.cs_atb_add_replicator(n_out_ports)
cs_atb_add_replicator = _csaccess.cs_atb_add_replicator

def cs_registration_complete():
    return _csaccess.cs_registration_complete()
cs_registration_complete = _csaccess.cs_registration_complete

def cs_registration_completed():
    return _csaccess.cs_registration_completed()
cs_registration_completed = _csaccess.cs_registration_completed

def cs_device_first():
    return _csaccess.cs_device_first()
cs_device_first = _csaccess.cs_device_first

def cs_device_next(dev):
    return _csaccess.cs_device_next(dev)
cs_device_next = _csaccess.cs_device_next

def cs_device_get(addr):
    return _csaccess.cs_device_get(addr)
cs_device_get = _csaccess.cs_device_get

def cs_n_devices():
    return _csaccess.cs_n_devices()
cs_n_devices = _csaccess.cs_n_devices

def cs_device_has_class(dev, cls):
    return _csaccess.cs_device_has_class(dev, cls)
cs_device_has_class = _csaccess.cs_device_has_class

def cs_device_get_type(dev):
    return _csaccess.cs_device_get_type(dev)
cs_device_get_type = _csaccess.cs_device_get_type

def cs_num_out_ports(dev):
    return _csaccess.cs_num_out_ports(dev)
cs_num_out_ports = _csaccess.cs_num_out_ports

def cs_num_in_ports(dev):
    return _csaccess.cs_num_in_ports(dev)
cs_num_in_ports = _csaccess.cs_num_in_ports

def cs_get_device_at_outport(dev, port):
    return _csaccess.cs_get_device_at_outport(dev, port)
cs_get_device_at_outport = _csaccess.cs_get_device_at_outport

def cs_get_dest_inport(dev, port):
    return _csaccess.cs_get_dest_inport(dev, port)
cs_get_dest_inport = _csaccess.cs_get_dest_inport

def cs_get_device_at_inport(dev, port):
    return _csaccess.cs_get_device_at_inport(dev, port)
cs_get_device_at_inport = _csaccess.cs_get_device_at_inport

def cs_get_src_outport(dev, port):
    return _csaccess.cs_get_src_outport(dev, port)
cs_get_src_outport = _csaccess.cs_get_src_outport

def cs_device_get_affinity(dev):
    return _csaccess.cs_device_get_affinity(dev)
cs_device_get_affinity = _csaccess.cs_device_get_affinity

def cs_device_get_MPIDR(dev):
    return _csaccess.cs_device_get_MPIDR(dev)
cs_device_get_MPIDR = _csaccess.cs_device_get_MPIDR

def cs_cpu_get_device(cpu, classes):
    return _csaccess.cs_cpu_get_device(cpu, classes)
cs_cpu_get_device = _csaccess.cs_cpu_get_device

def cs_sink_is_enabled(dev):
    return _csaccess.cs_sink_is_enabled(dev)
cs_sink_is_enabled = _csaccess.cs_sink_is_enabled

def cs_sink_enable(dev):
    return _csaccess.cs_sink_enable(dev)
cs_sink_enable = _csaccess.cs_sink_enable

def cs_sink_disable(dev):
    return _csaccess.cs_sink_disable(dev)
cs_sink_disable = _csaccess.cs_sink_disable

def cs_disable_tpiu():
    return _csaccess.cs_disable_tpiu()
cs_disable_tpiu = _csaccess.cs_disable_tpiu

def cs_get_buffer_size_bytes(dev):
    return _csaccess.cs_get_buffer_size_bytes(dev)
cs_get_buffer_size_bytes = _csaccess.cs_get_buffer_size_bytes

def cs_set_buffer_trigger_counter(dev, bytes):
    return _csaccess.cs_set_buffer_trigger_counter(dev, bytes)
cs_set_buffer_trigger_counter = _csaccess.cs_set_buffer_trigger_counter

def cs_buffer_has_wrapped(dev):
    return _csaccess.cs_buffer_has_wrapped(dev)
cs_buffer_has_wrapped = _csaccess.cs_buffer_has_wrapped

def cs_get_buffer_unread_bytes(dev):
    return _csaccess.cs_get_buffer_unread_bytes(dev)
cs_get_buffer_unread_bytes = _csaccess.cs_get_buffer_unread_bytes

def cs_get_trace_data(dev, buf, size):
    return _csaccess.cs_get_trace_data(dev, buf, size)
cs_get_trace_data = _csaccess.cs_get_trace_data

def cs_empty_trace_buffer(dev):
    return _csaccess.cs_empty_trace_buffer(dev)
cs_empty_trace_buffer = _csaccess.cs_empty_trace_buffer

def cs_insert_trace_data(dev, buf, size):
    return _csaccess.cs_insert_trace_data(dev, buf, size)
cs_insert_trace_data = _csaccess.cs_insert_trace_data

def cs_set_trace_source_id(dev, id):
    return _csaccess.cs_set_trace_source_id(dev, id)
cs_set_trace_source_id = _csaccess.cs_set_trace_source_id

def cs_get_trace_source_id(dev):
    return _csaccess.cs_get_trace_source_id(dev)
cs_get_trace_source_id = _csaccess.cs_get_trace_source_id

def cs_trace_enable(dev):
    return _csaccess.cs_trace_enable(dev)
cs_trace_enable = _csaccess.cs_trace_enable

def cs_trace_is_enabled(dev):
    return _csaccess.cs_trace_is_enabled(dev)
cs_trace_is_enabled = _csaccess.cs_trace_is_enabled

def cs_trace_disable(dev):
    return _csaccess.cs_trace_disable(dev)
cs_trace_disable = _csaccess.cs_trace_disable

def cs_trace_enable_timestamps(dev, enable):
    return _csaccess.cs_trace_enable_timestamps(dev, enable)
cs_trace_enable_timestamps = _csaccess.cs_trace_enable_timestamps

def cs_trace_enable_cycle_accurate(dev, enable):
    return _csaccess.cs_trace_enable_cycle_accurate(dev, enable)
cs_trace_enable_cycle_accurate = _csaccess.cs_trace_enable_cycle_accurate

def cs_replicator_set_filter(dev, port, filter):
    return _csaccess.cs_replicator_set_filter(dev, port, filter)
cs_replicator_set_filter = _csaccess.cs_replicator_set_filter

def cs_get_global_timestamp(ts):
    return _csaccess.cs_get_global_timestamp(ts)
cs_get_global_timestamp = _csaccess.cs_get_global_timestamp

def malloc_char_buf(*args):
    return _csaccess.malloc_char_buf(*args)
malloc_char_buf = _csaccess.malloc_char_buf

def free_char_buf(ptr):
    return _csaccess.free_char_buf(ptr)
free_char_buf = _csaccess.free_char_buf
# This file is compatible with both classic and new-style classes.


